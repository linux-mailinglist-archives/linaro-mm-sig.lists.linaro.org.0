Return-Path: <linaro-mm-sig-bounces@lists.linaro.org>
X-Original-To: lists+linaro-mm-sig@lfdr.de
Delivered-To: lists+linaro-mm-sig@lfdr.de
Received: from lists.linaro.org (lists.linaro.org [107.22.173.205])
	by mail.lfdr.de (Postfix) with ESMTPS id 33FC61B6E0C
	for <lists+linaro-mm-sig@lfdr.de>; Fri, 24 Apr 2020 08:22:17 +0200 (CEST)
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 50310619BF
	for <lists+linaro-mm-sig@lfdr.de>; Fri, 24 Apr 2020 06:22:16 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
	id 41D3B619C1; Fri, 24 Apr 2020 06:22:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on lists.linaro.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.5 required=5.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_MED,SPF_HELO_NONE,URIBL_SBL,URIBL_SBL_A
	autolearn=disabled version=3.4.2
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 91C3E66628;
	Fri, 24 Apr 2020 05:30:32 +0000 (UTC)
X-Original-To: linaro-mm-sig@lists.linaro.org
Delivered-To: linaro-mm-sig@lists.linaro.org
Received: from lists.linaro.org (localhost [127.0.0.1])
 by lists.linaro.org (Postfix) with ESMTP id C0B3F616DC
 for <linaro-mm-sig@lists.linaro.org>; Tue, 14 Apr 2020 13:15:50 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
 id A32556604B; Tue, 14 Apr 2020 13:15:50 +0000 (UTC)
Received: from bombadil.infradead.org (bombadil.infradead.org
 [198.137.202.133])
 by lists.linaro.org (Postfix) with ESMTPS id 9433A61997
 for <linaro-mm-sig@lists.linaro.org>; Tue, 14 Apr 2020 13:15:30 +0000 (UTC)
Received: from [2001:4bb8:180:384b:c70:4a89:bc61:2] (helo=localhost)
 by bombadil.infradead.org with esmtpsa (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jOLP4-0007HD-8q; Tue, 14 Apr 2020 13:15:03 +0000
From: Christoph Hellwig <hch@lst.de>
To: Andrew Morton <akpm@linux-foundation.org>,
 "K. Y. Srinivasan" <kys@microsoft.com>,
 Haiyang Zhang <haiyangz@microsoft.com>,
 Stephen Hemminger <sthemmin@microsoft.com>, Wei Liu <wei.liu@kernel.org>,
 x86@kernel.org, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Laura Abbott <labbott@redhat.com>,
 Sumit Semwal <sumit.semwal@linaro.org>,
 Sakari Ailus <sakari.ailus@linux.intel.com>,
 Minchan Kim <minchan@kernel.org>, Nitin Gupta <ngupta@vflare.org>
Date: Tue, 14 Apr 2020 15:13:40 +0200
Message-Id: <20200414131348.444715-22-hch@lst.de>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200414131348.444715-1-hch@lst.de>
References: <20200414131348.444715-1-hch@lst.de>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by
 bombadil.infradead.org. See http://www.infradead.org/rpr.html
X-Virus-Scanned: ClamAV using ClamSMTP
X-Mailman-Approved-At: Fri, 24 Apr 2020 05:29:38 +0000
Cc: Christophe Leroy <christophe.leroy@c-s.fr>, linux-arch@vger.kernel.org,
 linux-hyperv@vger.kernel.org, linux-s390@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>, linuxppc-dev@lists.ozlabs.org,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 Michael Kelley <mikelley@microsoft.com>, linaro-mm-sig@lists.linaro.org,
 linux-mm@kvack.org, iommu@lists.linux-foundation.org, bpf@vger.kernel.org,
 Robin Murphy <robin.murphy@arm.com>, Gao Xiang <xiang@kernel.org>,
 linux-arm-kernel@lists.infradead.org
Subject: [Linaro-mm-sig] [PATCH 21/29] mm: remove the pgprot argument to
	__vmalloc
X-BeenThere: linaro-mm-sig@lists.linaro.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: "Unified memory management interest group."
 <linaro-mm-sig.lists.linaro.org>
List-Unsubscribe: <https://lists.linaro.org/mailman/options/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=unsubscribe>
List-Archive: <http://lists.linaro.org/pipermail/linaro-mm-sig/>
List-Post: <mailto:linaro-mm-sig@lists.linaro.org>
List-Help: <mailto:linaro-mm-sig-request@lists.linaro.org?subject=help>
List-Subscribe: <https://lists.linaro.org/mailman/listinfo/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linaro-mm-sig-bounces@lists.linaro.org
Sender: "Linaro-mm-sig" <linaro-mm-sig-bounces@lists.linaro.org>
X-Virus-Scanned: ClamAV using ClamSMTP

VGhlIHBncHJvdCBhcmd1bWVudCB0byBfX3ZtYWxsb2MgaXMgYWx3YXlzIFBST1RfS0VSTkVMIG5v
dywgc28gcmVtb3ZlCml0LgoKU2lnbmVkLW9mZi1ieTogQ2hyaXN0b3BoIEhlbGx3aWcgPGhjaEBs
c3QuZGU+ClJldmlld2VkLWJ5OiBNaWNoYWVsIEtlbGxleSA8bWlrZWxsZXlAbWljcm9zb2Z0LmNv
bT4gW2h5cGVydl0KQWNrZWQtYnk6IEdhbyBYaWFuZyA8eGlhbmdAa2VybmVsLm9yZz4gW2Vyb2Zz
XQpBY2tlZC1ieTogUGV0ZXIgWmlqbHN0cmEgKEludGVsKSA8cGV0ZXJ6QGluZnJhZGVhZC5vcmc+
Ci0tLQogYXJjaC94ODYvaHlwZXJ2L2h2X2luaXQuYyAgICAgICAgICAgICAgfCAgMyArLS0KIGFy
Y2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmggICAgICAgIHwgIDMgKy0tCiBhcmNoL3g4Ni9r
dm0vc3ZtL3Nldi5jICAgICAgICAgICAgICAgICB8ICAzICstLQogZHJpdmVycy9ibG9jay9kcmJk
L2RyYmRfYml0bWFwLmMgICAgICAgfCAgNCArLS0tCiBkcml2ZXJzL2dwdS9kcm0vZXRuYXZpdi9l
dG5hdml2X2R1bXAuYyB8ICA0ICsrLS0KIGRyaXZlcnMvbGlnaHRudm0vcGJsay1pbml0LmMgICAg
ICAgICAgIHwgIDUgKystLS0KIGRyaXZlcnMvbWQvZG0tYnVmaW8uYyAgICAgICAgICAgICAgICAg
IHwgIDQgKystLQogZHJpdmVycy9tdGQvdWJpL2lvLmMgICAgICAgICAgICAgICAgICAgfCAgNCAr
Ky0tCiBkcml2ZXJzL3Njc2kvc2RfemJjLmMgICAgICAgICAgICAgICAgICB8ICAzICstLQogZnMv
Z2ZzMi9kaXIuYyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgOSArKysrLS0tLS0KIGZzL2dm
czIvcXVvdGEuYyAgICAgICAgICAgICAgICAgICAgICAgIHwgIDIgKy0KIGZzL25mcy9ibG9ja2xh
eW91dC9leHRlbnRfdHJlZS5jICAgICAgIHwgIDIgKy0KIGZzL250ZnMvbWFsbG9jLmggICAgICAg
ICAgICAgICAgICAgICAgIHwgIDIgKy0KIGZzL3ViaWZzL2RlYnVnLmMgICAgICAgICAgICAgICAg
ICAgICAgIHwgIDIgKy0KIGZzL3ViaWZzL2xwcm9wcy5jICAgICAgICAgICAgICAgICAgICAgIHwg
IDIgKy0KIGZzL3ViaWZzL2xwdF9jb21taXQuYyAgICAgICAgICAgICAgICAgIHwgIDQgKystLQog
ZnMvdWJpZnMvb3JwaGFuLmMgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQogZnMveGZzL2tt
ZW0uYyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQogaW5jbHVkZS9saW51eC92bWFs
bG9jLmggICAgICAgICAgICAgICAgfCAgMiArLQoga2VybmVsL2JwZi9jb3JlLmMgICAgICAgICAg
ICAgICAgICAgICAgfCAgNiArKystLS0KIGtlcm5lbC9ncm91cHMuYyAgICAgICAgICAgICAgICAg
ICAgICAgIHwgIDIgKy0KIGtlcm5lbC9tb2R1bGUuYyAgICAgICAgICAgICAgICAgICAgICAgIHwg
IDMgKy0tCiBtbS9ub21tdS5jICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDE1ICsrKysr
KystLS0tLS0tLQogbW0vcGFnZV9hbGxvYy5jICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiAr
LQogbW0vcGVyY3B1LmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQogbW0vdm1h
bGxvYy5jICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNCArKy0tCiBuZXQvYnJpZGdlL25l
dGZpbHRlci9lYnRhYmxlcy5jICAgICAgICB8ICA2ICsrLS0tLQogc291bmQvY29yZS9tZW1hbGxv
Yy5jICAgICAgICAgICAgICAgICAgfCAgMiArLQogc291bmQvY29yZS9wY21fbWVtb3J5LmMgICAg
ICAgICAgICAgICAgfCAgMiArLQogMjkgZmlsZXMgY2hhbmdlZCwgNDcgaW5zZXJ0aW9ucygrKSwg
NTkgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaHlwZXJ2L2h2X2luaXQuYyBi
L2FyY2gveDg2L2h5cGVydi9odl9pbml0LmMKaW5kZXggNWE0YjM2M2JhNjdiLi5hM2Q2ODlkZmM3
NDUgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2h5cGVydi9odl9pbml0LmMKKysrIGIvYXJjaC94ODYv
aHlwZXJ2L2h2X2luaXQuYwpAQCAtOTUsOCArOTUsNyBAQCBzdGF0aWMgaW50IGh2X2NwdV9pbml0
KHVuc2lnbmVkIGludCBjcHUpCiAJICogbm90IGJlIHN0b3BwZWQgaW4gdGhlIGNhc2Ugb2YgQ1BV
IG9mZmxpbmluZyBhbmQgdGhlIFZNIHdpbGwgaGFuZy4KIAkgKi8KIAlpZiAoISpodnApIHsKLQkJ
Kmh2cCA9IF9fdm1hbGxvYyhQQUdFX1NJWkUsIEdGUF9LRVJORUwgfCBfX0dGUF9aRVJPLAotCQkJ
CSBQQUdFX0tFUk5FTCk7CisJCSpodnAgPSBfX3ZtYWxsb2MoUEFHRV9TSVpFLCBHRlBfS0VSTkVM
IHwgX19HRlBfWkVSTyk7CiAJfQogCiAJaWYgKCpodnApIHsKZGlmZiAtLWdpdCBhL2FyY2gveDg2
L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9rdm1faG9zdC5o
CmluZGV4IDQyYTJkMGQzOTg0YS4uNzFiYzA5YmZmMDFhIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9p
bmNsdWRlL2FzbS9rdm1faG9zdC5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0
LmgKQEAgLTEyODAsOCArMTI4MCw3IEBAIGV4dGVybiBzdHJ1Y3Qga21lbV9jYWNoZSAqeDg2X2Zw
dV9jYWNoZTsKICNkZWZpbmUgX19LVk1fSEFWRV9BUkNIX1ZNX0FMTE9DCiBzdGF0aWMgaW5saW5l
IHN0cnVjdCBrdm0gKmt2bV9hcmNoX2FsbG9jX3ZtKHZvaWQpCiB7Ci0JcmV0dXJuIF9fdm1hbGxv
Yyhrdm1feDg2X29wcy52bV9zaXplLAotCQkJIEdGUF9LRVJORUxfQUNDT1VOVCB8IF9fR0ZQX1pF
Uk8sIFBBR0VfS0VSTkVMKTsKKwlyZXR1cm4gX192bWFsbG9jKGt2bV94ODZfb3BzLnZtX3NpemUs
IEdGUF9LRVJORUxfQUNDT1VOVCB8IF9fR0ZQX1pFUk8pOwogfQogdm9pZCBrdm1fYXJjaF9mcmVl
X3ZtKHN0cnVjdCBrdm0gKmt2bSk7CiAKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2t2bS9zdm0vc2V2
LmMgYi9hcmNoL3g4Ni9rdm0vc3ZtL3Nldi5jCmluZGV4IDBlM2ZjMzExZDdkYS4uYjY5OWU0MDU3
M2FkIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0vc3ZtL3Nldi5jCisrKyBiL2FyY2gveDg2L2t2
bS9zdm0vc2V2LmMKQEAgLTMzNSw4ICszMzUsNyBAQCBzdGF0aWMgc3RydWN0IHBhZ2UgKipzZXZf
cGluX21lbW9yeShzdHJ1Y3Qga3ZtICprdm0sIHVuc2lnbmVkIGxvbmcgdWFkZHIsCiAJLyogQXZv
aWQgdXNpbmcgdm1hbGxvYyBmb3Igc21hbGxlciBidWZmZXJzLiAqLwogCXNpemUgPSBucGFnZXMg
KiBzaXplb2Yoc3RydWN0IHBhZ2UgKik7CiAJaWYgKHNpemUgPiBQQUdFX1NJWkUpCi0JCXBhZ2Vz
ID0gX192bWFsbG9jKHNpemUsIEdGUF9LRVJORUxfQUNDT1VOVCB8IF9fR0ZQX1pFUk8sCi0JCQkJ
ICBQQUdFX0tFUk5FTCk7CisJCXBhZ2VzID0gX192bWFsbG9jKHNpemUsIEdGUF9LRVJORUxfQUND
T1VOVCB8IF9fR0ZQX1pFUk8pOwogCWVsc2UKIAkJcGFnZXMgPSBrbWFsbG9jKHNpemUsIEdGUF9L
RVJORUxfQUNDT1VOVCk7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvYmxvY2svZHJiZC9kcmJkX2Jp
dG1hcC5jIGIvZHJpdmVycy9ibG9jay9kcmJkL2RyYmRfYml0bWFwLmMKaW5kZXggMTVlOTk2OTcy
MzRhLi5kZjUzZGNhNWQwMmMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvYmxvY2svZHJiZC9kcmJkX2Jp
dG1hcC5jCisrKyBiL2RyaXZlcnMvYmxvY2svZHJiZC9kcmJkX2JpdG1hcC5jCkBAIC0zOTYsOSAr
Mzk2LDcgQEAgc3RhdGljIHN0cnVjdCBwYWdlICoqYm1fcmVhbGxvY19wYWdlcyhzdHJ1Y3QgZHJi
ZF9iaXRtYXAgKmIsIHVuc2lnbmVkIGxvbmcgd2FudCkKIAlieXRlcyA9IHNpemVvZihzdHJ1Y3Qg
cGFnZSAqKSp3YW50OwogCW5ld19wYWdlcyA9IGt6YWxsb2MoYnl0ZXMsIEdGUF9OT0lPIHwgX19H
RlBfTk9XQVJOKTsKIAlpZiAoIW5ld19wYWdlcykgewotCQluZXdfcGFnZXMgPSBfX3ZtYWxsb2Mo
Ynl0ZXMsCi0JCQkJR0ZQX05PSU8gfCBfX0dGUF9aRVJPLAotCQkJCVBBR0VfS0VSTkVMKTsKKwkJ
bmV3X3BhZ2VzID0gX192bWFsbG9jKGJ5dGVzLCBHRlBfTk9JTyB8IF9fR0ZQX1pFUk8pOwogCQlp
ZiAoIW5ld19wYWdlcykKIAkJCXJldHVybiBOVUxMOwogCX0KZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZHVtcC5jIGIvZHJpdmVycy9ncHUvZHJtL2V0bmF2aXYv
ZXRuYXZpdl9kdW1wLmMKaW5kZXggNjQ4Y2YwMjA3MzA5Li43MDZhZjAzMDRjYTQgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZHVtcC5jCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS9ldG5hdml2L2V0bmF2aXZfZHVtcC5jCkBAIC0xNTQsOCArMTU0LDggQEAgdm9pZCBl
dG5hdml2X2NvcmVfZHVtcChzdHJ1Y3QgZXRuYXZpdl9nZW1fc3VibWl0ICpzdWJtaXQpCiAJZmls
ZV9zaXplICs9IHNpemVvZigqaXRlci5oZHIpICogbl9vYmo7CiAKIAkvKiBBbGxvY2F0ZSB0aGUg
ZmlsZSBpbiB2bWFsbG9jIG1lbW9yeSwgaXQncyBsaWtlbHkgdG8gYmUgYmlnICovCi0JaXRlci5z
dGFydCA9IF9fdm1hbGxvYyhmaWxlX3NpemUsIEdGUF9LRVJORUwgfCBfX0dGUF9OT1dBUk4gfCBf
X0dGUF9OT1JFVFJZLAotCQkJICAgICAgIFBBR0VfS0VSTkVMKTsKKwlpdGVyLnN0YXJ0ID0gX192
bWFsbG9jKGZpbGVfc2l6ZSwgR0ZQX0tFUk5FTCB8IF9fR0ZQX05PV0FSTiB8CisJCQlfX0dGUF9O
T1JFVFJZKTsKIAlpZiAoIWl0ZXIuc3RhcnQpIHsKIAkJbXV0ZXhfdW5sb2NrKCZncHUtPm1tdV9j
b250ZXh0LT5sb2NrKTsKIAkJZGV2X3dhcm4oZ3B1LT5kZXYsICJmYWlsZWQgdG8gYWxsb2NhdGUg
ZGV2Y29yZWR1bXAgZmlsZVxuIik7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2xpZ2h0bnZtL3BibGst
aW5pdC5jIGIvZHJpdmVycy9saWdodG52bS9wYmxrLWluaXQuYwppbmRleCA5YTk2N2EyZTgzZGQu
LjZlNjc3ZmY2MmNjOSAxMDA2NDQKLS0tIGEvZHJpdmVycy9saWdodG52bS9wYmxrLWluaXQuYwor
KysgYi9kcml2ZXJzL2xpZ2h0bnZtL3BibGstaW5pdC5jCkBAIC0xNDUsOSArMTQ1LDggQEAgc3Rh
dGljIGludCBwYmxrX2wycF9pbml0KHN0cnVjdCBwYmxrICpwYmxrLCBib29sIGZhY3RvcnlfaW5p
dCkKIAlpbnQgcmV0ID0gMDsKIAogCW1hcF9zaXplID0gcGJsa190cmFuc19tYXBfc2l6ZShwYmxr
KTsKLQlwYmxrLT50cmFuc19tYXAgPSBfX3ZtYWxsb2MobWFwX3NpemUsIEdGUF9LRVJORUwgfCBf
X0dGUF9OT1dBUk4KLQkJCQkJfCBfX0dGUF9SRVRSWV9NQVlGQUlMIHwgX19HRlBfSElHSE1FTSwK
LQkJCQkJUEFHRV9LRVJORUwpOworCXBibGstPnRyYW5zX21hcCA9IF9fdm1hbGxvYyhtYXBfc2l6
ZSwgR0ZQX0tFUk5FTCB8IF9fR0ZQX05PV0FSTiB8CisJCQkJICAgIF9fR0ZQX1JFVFJZX01BWUZB
SUwgfCBfX0dGUF9ISUdITUVNKTsKIAlpZiAoIXBibGstPnRyYW5zX21hcCkgewogCQlwYmxrX2Vy
cihwYmxrLCAiZmFpbGVkIHRvIGFsbG9jYXRlIEwyUCAobmVlZCAlenUgb2YgbWVtb3J5KVxuIiwK
IAkJCQltYXBfc2l6ZSk7CmRpZmYgLS1naXQgYS9kcml2ZXJzL21kL2RtLWJ1ZmlvLmMgYi9kcml2
ZXJzL21kL2RtLWJ1ZmlvLmMKaW5kZXggMmQ1MTljMjIzNTYyLi5kMTc4NmNmZDdmMjIgMTAwNjQ0
Ci0tLSBhL2RyaXZlcnMvbWQvZG0tYnVmaW8uYworKysgYi9kcml2ZXJzL21kL2RtLWJ1ZmlvLmMK
QEAgLTQwMCwxMyArNDAwLDEzIEBAIHN0YXRpYyB2b2lkICphbGxvY19idWZmZXJfZGF0YShzdHJ1
Y3QgZG1fYnVmaW9fY2xpZW50ICpjLCBnZnBfdCBnZnBfbWFzaywKIAkgKi8KIAlpZiAoZ2ZwX21h
c2sgJiBfX0dGUF9OT1JFVFJZKSB7CiAJCXVuc2lnbmVkIG5vaW9fZmxhZyA9IG1lbWFsbG9jX25v
aW9fc2F2ZSgpOwotCQl2b2lkICpwdHIgPSBfX3ZtYWxsb2MoYy0+YmxvY2tfc2l6ZSwgZ2ZwX21h
c2ssIFBBR0VfS0VSTkVMKTsKKwkJdm9pZCAqcHRyID0gX192bWFsbG9jKGMtPmJsb2NrX3NpemUs
IGdmcF9tYXNrKTsKIAogCQltZW1hbGxvY19ub2lvX3Jlc3RvcmUobm9pb19mbGFnKTsKIAkJcmV0
dXJuIHB0cjsKIAl9CiAKLQlyZXR1cm4gX192bWFsbG9jKGMtPmJsb2NrX3NpemUsIGdmcF9tYXNr
LCBQQUdFX0tFUk5FTCk7CisJcmV0dXJuIF9fdm1hbGxvYyhjLT5ibG9ja19zaXplLCBnZnBfbWFz
ayk7CiB9CiAKIC8qCmRpZmYgLS1naXQgYS9kcml2ZXJzL210ZC91YmkvaW8uYyBiL2RyaXZlcnMv
bXRkL3ViaS9pby5jCmluZGV4IGI1N2I4NGZiOTdkMC4uMTRkODkwYjAwZDJjIDEwMDY0NAotLS0g
YS9kcml2ZXJzL210ZC91YmkvaW8uYworKysgYi9kcml2ZXJzL210ZC91YmkvaW8uYwpAQCAtMTI5
Nyw3ICsxMjk3LDcgQEAgc3RhdGljIGludCBzZWxmX2NoZWNrX3dyaXRlKHN0cnVjdCB1YmlfZGV2
aWNlICp1YmksIGNvbnN0IHZvaWQgKmJ1ZiwgaW50IHBudW0sCiAJaWYgKCF1YmlfZGJnX2Noa19p
byh1YmkpKQogCQlyZXR1cm4gMDsKIAotCWJ1ZjEgPSBfX3ZtYWxsb2MobGVuLCBHRlBfTk9GUywg
UEFHRV9LRVJORUwpOworCWJ1ZjEgPSBfX3ZtYWxsb2MobGVuLCBHRlBfTk9GUyk7CiAJaWYgKCFi
dWYxKSB7CiAJCXViaV9lcnIodWJpLCAiY2Fubm90IGFsbG9jYXRlIG1lbW9yeSB0byBjaGVjayB3
cml0ZXMiKTsKIAkJcmV0dXJuIDA7CkBAIC0xMzYxLDcgKzEzNjEsNyBAQCBpbnQgdWJpX3NlbGZf
Y2hlY2tfYWxsX2ZmKHN0cnVjdCB1YmlfZGV2aWNlICp1YmksIGludCBwbnVtLCBpbnQgb2Zmc2V0
LCBpbnQgbGVuKQogCWlmICghdWJpX2RiZ19jaGtfaW8odWJpKSkKIAkJcmV0dXJuIDA7CiAKLQli
dWYgPSBfX3ZtYWxsb2MobGVuLCBHRlBfTk9GUywgUEFHRV9LRVJORUwpOworCWJ1ZiA9IF9fdm1h
bGxvYyhsZW4sIEdGUF9OT0ZTKTsKIAlpZiAoIWJ1ZikgewogCQl1YmlfZXJyKHViaSwgImNhbm5v
dCBhbGxvY2F0ZSBtZW1vcnkgdG8gY2hlY2sgZm9yIDB4RkZzIik7CiAJCXJldHVybiAwOwpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9zY3NpL3NkX3piYy5jIGIvZHJpdmVycy9zY3NpL3NkX3piYy5jCmlu
ZGV4IGY0NWMyMmIwOTcyNi4uOGJlMjc0MjZhYTY2IDEwMDY0NAotLS0gYS9kcml2ZXJzL3Njc2kv
c2RfemJjLmMKKysrIGIvZHJpdmVycy9zY3NpL3NkX3piYy5jCkBAIC0xMzYsOCArMTM2LDcgQEAg
c3RhdGljIHZvaWQgKnNkX3piY19hbGxvY19yZXBvcnRfYnVmZmVyKHN0cnVjdCBzY3NpX2Rpc2sg
KnNka3AsCiAKIAl3aGlsZSAoYnVmc2l6ZSA+PSBTRUNUT1JfU0laRSkgewogCQlidWYgPSBfX3Zt
YWxsb2MoYnVmc2l6ZSwKLQkJCQlHRlBfS0VSTkVMIHwgX19HRlBfWkVSTyB8IF9fR0ZQX05PUkVU
UlksCi0JCQkJUEFHRV9LRVJORUwpOworCQkJCUdGUF9LRVJORUwgfCBfX0dGUF9aRVJPIHwgX19H
RlBfTk9SRVRSWSk7CiAJCWlmIChidWYpIHsKIAkJCSpidWZsZW4gPSBidWZzaXplOwogCQkJcmV0
dXJuIGJ1ZjsKZGlmZiAtLWdpdCBhL2ZzL2dmczIvZGlyLmMgYi9mcy9nZnMyL2Rpci5jCmluZGV4
IGMzZjc3MzI0MTViZS4uYzBmMjg3NWM5NDZjIDEwMDY0NAotLS0gYS9mcy9nZnMyL2Rpci5jCisr
KyBiL2ZzL2dmczIvZGlyLmMKQEAgLTM1NCw3ICszNTQsNyBAQCBzdGF0aWMgX19iZTY0ICpnZnMy
X2Rpcl9nZXRfaGFzaF90YWJsZShzdHJ1Y3QgZ2ZzMl9pbm9kZSAqaXApCiAKIAloYyA9IGttYWxs
b2MoaHNpemUsIEdGUF9OT0ZTIHwgX19HRlBfTk9XQVJOKTsKIAlpZiAoaGMgPT0gTlVMTCkKLQkJ
aGMgPSBfX3ZtYWxsb2MoaHNpemUsIEdGUF9OT0ZTLCBQQUdFX0tFUk5FTCk7CisJCWhjID0gX192
bWFsbG9jKGhzaXplLCBHRlBfTk9GUyk7CiAKIAlpZiAoaGMgPT0gTlVMTCkKIAkJcmV0dXJuIEVS
Ul9QVFIoLUVOT01FTSk7CkBAIC0xMTY2LDcgKzExNjYsNyBAQCBzdGF0aWMgaW50IGRpcl9kb3Vi
bGVfZXhoYXNoKHN0cnVjdCBnZnMyX2lub2RlICpkaXApCiAKIAloYzIgPSBrbWFsbG9jX2FycmF5
KGhzaXplX2J5dGVzLCAyLCBHRlBfTk9GUyB8IF9fR0ZQX05PV0FSTik7CiAJaWYgKGhjMiA9PSBO
VUxMKQotCQloYzIgPSBfX3ZtYWxsb2MoaHNpemVfYnl0ZXMgKiAyLCBHRlBfTk9GUywgUEFHRV9L
RVJORUwpOworCQloYzIgPSBfX3ZtYWxsb2MoaHNpemVfYnl0ZXMgKiAyLCBHRlBfTk9GUyk7CiAK
IAlpZiAoIWhjMikKIAkJcmV0dXJuIC1FTk9NRU07CkBAIC0xMzI3LDcgKzEzMjcsNyBAQCBzdGF0
aWMgdm9pZCAqZ2ZzMl9hbGxvY19zb3J0X2J1ZmZlcih1bnNpZ25lZCBzaXplKQogCWlmIChzaXpl
IDwgS01BTExPQ19NQVhfU0laRSkKIAkJcHRyID0ga21hbGxvYyhzaXplLCBHRlBfTk9GUyB8IF9f
R0ZQX05PV0FSTik7CiAJaWYgKCFwdHIpCi0JCXB0ciA9IF9fdm1hbGxvYyhzaXplLCBHRlBfTk9G
UywgUEFHRV9LRVJORUwpOworCQlwdHIgPSBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX05PRlMpOwogCXJl
dHVybiBwdHI7CiB9CiAKQEAgLTE5ODcsOCArMTk4Nyw3IEBAIHN0YXRpYyBpbnQgbGVhZl9kZWFs
bG9jKHN0cnVjdCBnZnMyX2lub2RlICpkaXAsIHUzMiBpbmRleCwgdTMyIGxlbiwKIAogCWh0ID0g
a3phbGxvYyhzaXplLCBHRlBfTk9GUyB8IF9fR0ZQX05PV0FSTik7CiAJaWYgKGh0ID09IE5VTEwp
Ci0JCWh0ID0gX192bWFsbG9jKHNpemUsIEdGUF9OT0ZTIHwgX19HRlBfTk9XQVJOIHwgX19HRlBf
WkVSTywKLQkJCSAgICAgICBQQUdFX0tFUk5FTCk7CisJCWh0ID0gX192bWFsbG9jKHNpemUsIEdG
UF9OT0ZTIHwgX19HRlBfTk9XQVJOIHwgX19HRlBfWkVSTyk7CiAJaWYgKCFodCkKIAkJcmV0dXJu
IC1FTk9NRU07CiAKZGlmZiAtLWdpdCBhL2ZzL2dmczIvcXVvdGEuYyBiL2ZzL2dmczIvcXVvdGEu
YwppbmRleCBjYzBjNGI1ODAwYmUuLmI4NGFjNTg0M2VjNCAxMDA2NDQKLS0tIGEvZnMvZ2ZzMi9x
dW90YS5jCisrKyBiL2ZzL2dmczIvcXVvdGEuYwpAQCAtMTM2OCw3ICsxMzY4LDcgQEAgaW50IGdm
czJfcXVvdGFfaW5pdChzdHJ1Y3QgZ2ZzMl9zYmQgKnNkcCkKIAlzZHAtPnNkX3F1b3RhX2JpdG1h
cCA9IGt6YWxsb2MoYm1fc2l6ZSwgR0ZQX05PRlMgfCBfX0dGUF9OT1dBUk4pOwogCWlmIChzZHAt
PnNkX3F1b3RhX2JpdG1hcCA9PSBOVUxMKQogCQlzZHAtPnNkX3F1b3RhX2JpdG1hcCA9IF9fdm1h
bGxvYyhibV9zaXplLCBHRlBfTk9GUyB8Ci0JCQkJCQkgX19HRlBfWkVSTywgUEFHRV9LRVJORUwp
OworCQkJCQkJIF9fR0ZQX1pFUk8pOwogCWlmICghc2RwLT5zZF9xdW90YV9iaXRtYXApCiAJCXJl
dHVybiBlcnJvcjsKIApkaWZmIC0tZ2l0IGEvZnMvbmZzL2Jsb2NrbGF5b3V0L2V4dGVudF90cmVl
LmMgYi9mcy9uZnMvYmxvY2tsYXlvdXQvZXh0ZW50X3RyZWUuYwppbmRleCA3YTU3ZmYyNTI4YWYu
LjhmN2NmZjdhNDI5MyAxMDA2NDQKLS0tIGEvZnMvbmZzL2Jsb2NrbGF5b3V0L2V4dGVudF90cmVl
LmMKKysrIGIvZnMvbmZzL2Jsb2NrbGF5b3V0L2V4dGVudF90cmVlLmMKQEAgLTU4Miw3ICs1ODIs
NyBAQCBleHRfdHJlZV9wcmVwYXJlX2NvbW1pdChzdHJ1Y3QgbmZzNF9sYXlvdXRjb21taXRfYXJn
cyAqYXJnKQogCQlpZiAoIWFyZy0+bGF5b3V0dXBkYXRlX3BhZ2VzKQogCQkJcmV0dXJuIC1FTk9N
RU07CiAKLQkJc3RhcnRfcCA9IF9fdm1hbGxvYyhidWZmZXJfc2l6ZSwgR0ZQX05PRlMsIFBBR0Vf
S0VSTkVMKTsKKwkJc3RhcnRfcCA9IF9fdm1hbGxvYyhidWZmZXJfc2l6ZSwgR0ZQX05PRlMpOwog
CQlpZiAoIXN0YXJ0X3ApIHsKIAkJCWtmcmVlKGFyZy0+bGF5b3V0dXBkYXRlX3BhZ2VzKTsKIAkJ
CXJldHVybiAtRU5PTUVNOwpkaWZmIC0tZ2l0IGEvZnMvbnRmcy9tYWxsb2MuaCBiL2ZzL250ZnMv
bWFsbG9jLmgKaW5kZXggODQyYjBiZmMzYWM5Li43MDY4NDI1NzM1ZjEgMTAwNjQ0Ci0tLSBhL2Zz
L250ZnMvbWFsbG9jLmgKKysrIGIvZnMvbnRmcy9tYWxsb2MuaApAQCAtMzQsNyArMzQsNyBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgKl9fbnRmc19tYWxsb2ModW5zaWduZWQgbG9uZyBzaXplLCBnZnBf
dCBnZnBfbWFzaykKIAkJLyogcmV0dXJuICh2b2lkICopX19nZXRfZnJlZV9wYWdlKGdmcF9tYXNr
KTsgKi8KIAl9CiAJaWYgKGxpa2VseSgoc2l6ZSA+PiBQQUdFX1NISUZUKSA8IHRvdGFscmFtX3Bh
Z2VzKCkpKQotCQlyZXR1cm4gX192bWFsbG9jKHNpemUsIGdmcF9tYXNrLCBQQUdFX0tFUk5FTCk7
CisJCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwX21hc2spOwogCXJldHVybiBOVUxMOwogfQog
CmRpZmYgLS1naXQgYS9mcy91Ymlmcy9kZWJ1Zy5jIGIvZnMvdWJpZnMvZGVidWcuYwppbmRleCAw
ZjVhNDgwZmUyNjQuLjMxMjg4ZDhmYTJjZSAxMDA2NDQKLS0tIGEvZnMvdWJpZnMvZGVidWcuYwor
KysgYi9mcy91Ymlmcy9kZWJ1Zy5jCkBAIC04MTUsNyArODE1LDcgQEAgdm9pZCB1Ymlmc19kdW1w
X2xlYihjb25zdCBzdHJ1Y3QgdWJpZnNfaW5mbyAqYywgaW50IGxudW0pCiAKIAlwcl9lcnIoIihw
aWQgJWQpIHN0YXJ0IGR1bXBpbmcgTEVCICVkXG4iLCBjdXJyZW50LT5waWQsIGxudW0pOwogCi0J
YnVmID0gX192bWFsbG9jKGMtPmxlYl9zaXplLCBHRlBfTk9GUywgUEFHRV9LRVJORUwpOworCWJ1
ZiA9IF9fdm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMpOwogCWlmICghYnVmKSB7CiAJCXVi
aWZzX2VycihjLCAiY2Fubm90IGFsbG9jYXRlIG1lbW9yeSBmb3IgZHVtcGluZyBMRUIgJWQiLCBs
bnVtKTsKIAkJcmV0dXJuOwpkaWZmIC0tZ2l0IGEvZnMvdWJpZnMvbHByb3BzLmMgYi9mcy91Ymlm
cy9scHJvcHMuYwppbmRleCAyOTgyNmM1MTg4M2EuLjIyYmZkYTE1OGY3ZiAxMDA2NDQKLS0tIGEv
ZnMvdWJpZnMvbHByb3BzLmMKKysrIGIvZnMvdWJpZnMvbHByb3BzLmMKQEAgLTEwOTUsNyArMTA5
NSw3IEBAIHN0YXRpYyBpbnQgc2Nhbl9jaGVja19jYihzdHJ1Y3QgdWJpZnNfaW5mbyAqYywKIAkJ
cmV0dXJuIExQVF9TQ0FOX0NPTlRJTlVFOwogCX0KIAotCWJ1ZiA9IF9fdm1hbGxvYyhjLT5sZWJf
c2l6ZSwgR0ZQX05PRlMsIFBBR0VfS0VSTkVMKTsKKwlidWYgPSBfX3ZtYWxsb2MoYy0+bGViX3Np
emUsIEdGUF9OT0ZTKTsKIAlpZiAoIWJ1ZikKIAkJcmV0dXJuIC1FTk9NRU07CiAKZGlmZiAtLWdp
dCBhL2ZzL3ViaWZzL2xwdF9jb21taXQuYyBiL2ZzL3ViaWZzL2xwdF9jb21taXQuYwppbmRleCBm
ZjVlMDQxMWNmMmQuLmQ3NmExOWU0NjBjZCAxMDA2NDQKLS0tIGEvZnMvdWJpZnMvbHB0X2NvbW1p
dC5jCisrKyBiL2ZzL3ViaWZzL2xwdF9jb21taXQuYwpAQCAtMTU5Niw3ICsxNTk2LDcgQEAgc3Rh
dGljIGludCBkYmdfY2hlY2tfbHRhYl9sbnVtKHN0cnVjdCB1Ymlmc19pbmZvICpjLCBpbnQgbG51
bSkKIAlpZiAoIWRiZ19pc19jaGtfbHByb3BzKGMpKQogCQlyZXR1cm4gMDsKIAotCWJ1ZiA9IHAg
PSBfX3ZtYWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTLCBQQUdFX0tFUk5FTCk7CisJYnVmID0g
cCA9IF9fdm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMpOwogCWlmICghYnVmKSB7CiAJCXVi
aWZzX2VycihjLCAiY2Fubm90IGFsbG9jYXRlIG1lbW9yeSBmb3IgbHRhYiBjaGVja2luZyIpOwog
CQlyZXR1cm4gMDsKQEAgLTE4NDUsNyArMTg0NSw3IEBAIHN0YXRpYyB2b2lkIGR1bXBfbHB0X2xl
Yihjb25zdCBzdHJ1Y3QgdWJpZnNfaW5mbyAqYywgaW50IGxudW0pCiAJdm9pZCAqYnVmLCAqcDsK
IAogCXByX2VycigiKHBpZCAlZCkgc3RhcnQgZHVtcGluZyBMRUIgJWRcbiIsIGN1cnJlbnQtPnBp
ZCwgbG51bSk7Ci0JYnVmID0gcCA9IF9fdm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMsIFBB
R0VfS0VSTkVMKTsKKwlidWYgPSBwID0gX192bWFsbG9jKGMtPmxlYl9zaXplLCBHRlBfTk9GUyk7
CiAJaWYgKCFidWYpIHsKIAkJdWJpZnNfZXJyKGMsICJjYW5ub3QgYWxsb2NhdGUgbWVtb3J5IHRv
IGR1bXAgTFBUIik7CiAJCXJldHVybjsKZGlmZiAtLWdpdCBhL2ZzL3ViaWZzL29ycGhhbi5jIGIv
ZnMvdWJpZnMvb3JwaGFuLmMKaW5kZXggMjgzZjllYjQ4NDEwLi4yYzI5NDA4NWZmZWQgMTAwNjQ0
Ci0tLSBhL2ZzL3ViaWZzL29ycGhhbi5jCisrKyBiL2ZzL3ViaWZzL29ycGhhbi5jCkBAIC05Nzcs
NyArOTc3LDcgQEAgc3RhdGljIGludCBkYmdfc2Nhbl9vcnBoYW5zKHN0cnVjdCB1Ymlmc19pbmZv
ICpjLCBzdHJ1Y3QgY2hlY2tfaW5mbyAqY2kpCiAJaWYgKGMtPm5vX29ycGhzKQogCQlyZXR1cm4g
MDsKIAotCWJ1ZiA9IF9fdm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMsIFBBR0VfS0VSTkVM
KTsKKwlidWYgPSBfX3ZtYWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTKTsKIAlpZiAoIWJ1Zikg
ewogCQl1Ymlmc19lcnIoYywgImNhbm5vdCBhbGxvY2F0ZSBtZW1vcnkgdG8gY2hlY2sgb3JwaGFu
cyIpOwogCQlyZXR1cm4gMDsKZGlmZiAtLWdpdCBhL2ZzL3hmcy9rbWVtLmMgYi9mcy94ZnMva21l
bS5jCmluZGV4IDFkYTk0MjM3YThjZi4uZjEzNjY0NzVjMzg5IDEwMDY0NAotLS0gYS9mcy94ZnMv
a21lbS5jCisrKyBiL2ZzL3hmcy9rbWVtLmMKQEAgLTQ4LDcgKzQ4LDcgQEAgX19rbWVtX3ZtYWxs
b2Moc2l6ZV90IHNpemUsIHhmc19rbV9mbGFnc190IGZsYWdzKQogCWlmIChmbGFncyAmIEtNX05P
RlMpCiAJCW5vZnNfZmxhZyA9IG1lbWFsbG9jX25vZnNfc2F2ZSgpOwogCi0JcHRyID0gX192bWFs
bG9jKHNpemUsIGxmbGFncywgUEFHRV9LRVJORUwpOworCXB0ciA9IF9fdm1hbGxvYyhzaXplLCBs
ZmxhZ3MpOwogCiAJaWYgKGZsYWdzICYgS01fTk9GUykKIAkJbWVtYWxsb2Nfbm9mc19yZXN0b3Jl
KG5vZnNfZmxhZyk7CmRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L3ZtYWxsb2MuaCBiL2luY2x1
ZGUvbGludXgvdm1hbGxvYy5oCmluZGV4IDkyNzNiMWE5MWNhNS4uYzFiOWQ2ZWNhMDVmIDEwMDY0
NAotLS0gYS9pbmNsdWRlL2xpbnV4L3ZtYWxsb2MuaAorKysgYi9pbmNsdWRlL2xpbnV4L3ZtYWxs
b2MuaApAQCAtMTEwLDcgKzExMCw3IEBAIGV4dGVybiB2b2lkICp2bWFsbG9jX3VzZXJfbm9kZV9m
bGFncyh1bnNpZ25lZCBsb25nIHNpemUsIGludCBub2RlLCBnZnBfdCBmbGFncyk7CiBleHRlcm4g
dm9pZCAqdm1hbGxvY19leGVjKHVuc2lnbmVkIGxvbmcgc2l6ZSk7CiBleHRlcm4gdm9pZCAqdm1h
bGxvY18zMih1bnNpZ25lZCBsb25nIHNpemUpOwogZXh0ZXJuIHZvaWQgKnZtYWxsb2NfMzJfdXNl
cih1bnNpZ25lZCBsb25nIHNpemUpOwotZXh0ZXJuIHZvaWQgKl9fdm1hbGxvYyh1bnNpZ25lZCBs
b25nIHNpemUsIGdmcF90IGdmcF9tYXNrLCBwZ3Byb3RfdCBwcm90KTsKK2V4dGVybiB2b2lkICpf
X3ZtYWxsb2ModW5zaWduZWQgbG9uZyBzaXplLCBnZnBfdCBnZnBfbWFzayk7CiBleHRlcm4gdm9p
ZCAqX192bWFsbG9jX25vZGVfcmFuZ2UodW5zaWduZWQgbG9uZyBzaXplLCB1bnNpZ25lZCBsb25n
IGFsaWduLAogCQkJdW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGdmcF90
IGdmcF9tYXNrLAogCQkJcGdwcm90X3QgcHJvdCwgdW5zaWduZWQgbG9uZyB2bV9mbGFncywgaW50
IG5vZGUsCmRpZmYgLS1naXQgYS9rZXJuZWwvYnBmL2NvcmUuYyBiL2tlcm5lbC9icGYvY29yZS5j
CmluZGV4IDkxNmY1MTMyYTk4NC4uYzcxMmRlNTYwMzU3IDEwMDY0NAotLS0gYS9rZXJuZWwvYnBm
L2NvcmUuYworKysgYi9rZXJuZWwvYnBmL2NvcmUuYwpAQCAtODIsNyArODIsNyBAQCBzdHJ1Y3Qg
YnBmX3Byb2cgKmJwZl9wcm9nX2FsbG9jX25vX3N0YXRzKHVuc2lnbmVkIGludCBzaXplLCBnZnBf
dCBnZnBfZXh0cmFfZmxhZwogCXN0cnVjdCBicGZfcHJvZyAqZnA7CiAKIAlzaXplID0gcm91bmRf
dXAoc2l6ZSwgUEFHRV9TSVpFKTsKLQlmcCA9IF9fdm1hbGxvYyhzaXplLCBnZnBfZmxhZ3MsIFBB
R0VfS0VSTkVMKTsKKwlmcCA9IF9fdm1hbGxvYyhzaXplLCBnZnBfZmxhZ3MpOwogCWlmIChmcCA9
PSBOVUxMKQogCQlyZXR1cm4gTlVMTDsKIApAQCAtMjMyLDcgKzIzMiw3IEBAIHN0cnVjdCBicGZf
cHJvZyAqYnBmX3Byb2dfcmVhbGxvYyhzdHJ1Y3QgYnBmX3Byb2cgKmZwX29sZCwgdW5zaWduZWQg
aW50IHNpemUsCiAJaWYgKHJldCkKIAkJcmV0dXJuIE5VTEw7CiAKLQlmcCA9IF9fdm1hbGxvYyhz
aXplLCBnZnBfZmxhZ3MsIFBBR0VfS0VSTkVMKTsKKwlmcCA9IF9fdm1hbGxvYyhzaXplLCBnZnBf
ZmxhZ3MpOwogCWlmIChmcCA9PSBOVUxMKSB7CiAJCV9fYnBmX3Byb2dfdW5jaGFyZ2UoZnBfb2xk
LT5hdXgtPnVzZXIsIGRlbHRhKTsKIAl9IGVsc2UgewpAQCAtMTA4OSw3ICsxMDg5LDcgQEAgc3Rh
dGljIHN0cnVjdCBicGZfcHJvZyAqYnBmX3Byb2dfY2xvbmVfY3JlYXRlKHN0cnVjdCBicGZfcHJv
ZyAqZnBfb3RoZXIsCiAJZ2ZwX3QgZ2ZwX2ZsYWdzID0gR0ZQX0tFUk5FTCB8IF9fR0ZQX1pFUk8g
fCBnZnBfZXh0cmFfZmxhZ3M7CiAJc3RydWN0IGJwZl9wcm9nICpmcDsKIAotCWZwID0gX192bWFs
bG9jKGZwX290aGVyLT5wYWdlcyAqIFBBR0VfU0laRSwgZ2ZwX2ZsYWdzLCBQQUdFX0tFUk5FTCk7
CisJZnAgPSBfX3ZtYWxsb2MoZnBfb3RoZXItPnBhZ2VzICogUEFHRV9TSVpFLCBnZnBfZmxhZ3Mp
OwogCWlmIChmcCAhPSBOVUxMKSB7CiAJCS8qIGF1eC0+cHJvZyBzdGlsbCBwb2ludHMgdG8gdGhl
IGZwX290aGVyIG9uZSwgc28KIAkJICogd2hlbiBwcm9tb3RpbmcgdGhlIGNsb25lIHRvIHRoZSBy
ZWFsIHByb2dyYW0sCmRpZmYgLS1naXQgYS9rZXJuZWwvZ3JvdXBzLmMgYi9rZXJuZWwvZ3JvdXBz
LmMKaW5kZXggZGFhZTJmMmRjNmQ0Li42ZWU2NjkxZjY4MzkgMTAwNjQ0Ci0tLSBhL2tlcm5lbC9n
cm91cHMuYworKysgYi9rZXJuZWwvZ3JvdXBzLmMKQEAgLTIwLDcgKzIwLDcgQEAgc3RydWN0IGdy
b3VwX2luZm8gKmdyb3Vwc19hbGxvYyhpbnQgZ2lkc2V0c2l6ZSkKIAlsZW4gPSBzaXplb2Yoc3Ry
dWN0IGdyb3VwX2luZm8pICsgc2l6ZW9mKGtnaWRfdCkgKiBnaWRzZXRzaXplOwogCWdpID0ga21h
bGxvYyhsZW4sIEdGUF9LRVJORUxfQUNDT1VOVHxfX0dGUF9OT1dBUk58X19HRlBfTk9SRVRSWSk7
CiAJaWYgKCFnaSkKLQkJZ2kgPSBfX3ZtYWxsb2MobGVuLCBHRlBfS0VSTkVMX0FDQ09VTlQsIFBB
R0VfS0VSTkVMKTsKKwkJZ2kgPSBfX3ZtYWxsb2MobGVuLCBHRlBfS0VSTkVMX0FDQ09VTlQpOwog
CWlmICghZ2kpCiAJCXJldHVybiBOVUxMOwogCmRpZmYgLS1naXQgYS9rZXJuZWwvbW9kdWxlLmMg
Yi9rZXJuZWwvbW9kdWxlLmMKaW5kZXggNjQ2ZjFlMjMzMGQyLi4wODY2MThhMDA1OGYgMTAwNjQ0
Ci0tLSBhL2tlcm5lbC9tb2R1bGUuYworKysgYi9rZXJuZWwvbW9kdWxlLmMKQEAgLTI5NDYsOCAr
Mjk0Niw3IEBAIHN0YXRpYyBpbnQgY29weV9tb2R1bGVfZnJvbV91c2VyKGNvbnN0IHZvaWQgX191
c2VyICp1bW9kLCB1bnNpZ25lZCBsb25nIGxlbiwKIAkJcmV0dXJuIGVycjsKIAogCS8qIFN1Y2sg
aW4gZW50aXJlIGZpbGU6IHdlJ2xsIHdhbnQgbW9zdCBvZiBpdC4gKi8KLQlpbmZvLT5oZHIgPSBf
X3ZtYWxsb2MoaW5mby0+bGVuLAotCQkJR0ZQX0tFUk5FTCB8IF9fR0ZQX05PV0FSTiwgUEFHRV9L
RVJORUwpOworCWluZm8tPmhkciA9IF9fdm1hbGxvYyhpbmZvLT5sZW4sIEdGUF9LRVJORUwgfCBf
X0dGUF9OT1dBUk4pOwogCWlmICghaW5mby0+aGRyKQogCQlyZXR1cm4gLUVOT01FTTsKIApkaWZm
IC0tZ2l0IGEvbW0vbm9tbXUuYyBiL21tL25vbW11LmMKaW5kZXggNGYwN2I3ZWYwMjk3Li4yZGY1
NDlhZGIyMmIgMTAwNjQ0Ci0tLSBhL21tL25vbW11LmMKKysrIGIvbW0vbm9tbXUuYwpAQCAtMTQw
LDcgKzE0MCw3IEBAIHZvaWQgdmZyZWUoY29uc3Qgdm9pZCAqYWRkcikKIH0KIEVYUE9SVF9TWU1C
T0wodmZyZWUpOwogCi12b2lkICpfX3ZtYWxsb2ModW5zaWduZWQgbG9uZyBzaXplLCBnZnBfdCBn
ZnBfbWFzaywgcGdwcm90X3QgcHJvdCkKK3ZvaWQgKl9fdm1hbGxvYyh1bnNpZ25lZCBsb25nIHNp
emUsIGdmcF90IGdmcF9tYXNrKQogewogCS8qCiAJICogIFlvdSBjYW4ndCBzcGVjaWZ5IF9fR0ZQ
X0hJR0hNRU0gd2l0aCBrbWFsbG9jKCkgc2luY2Uga21hbGxvYygpCkBAIC0xNTIsMTQgKzE1Miwx
NCBAQCBFWFBPUlRfU1lNQk9MKF9fdm1hbGxvYyk7CiAKIHZvaWQgKl9fdm1hbGxvY19ub2RlX2Zs
YWdzKHVuc2lnbmVkIGxvbmcgc2l6ZSwgaW50IG5vZGUsIGdmcF90IGZsYWdzKQogewotCXJldHVy
biBfX3ZtYWxsb2Moc2l6ZSwgZmxhZ3MsIFBBR0VfS0VSTkVMKTsKKwlyZXR1cm4gX192bWFsbG9j
KHNpemUsIGZsYWdzKTsKIH0KIAogc3RhdGljIHZvaWQgKl9fdm1hbGxvY191c2VyX2ZsYWdzKHVu
c2lnbmVkIGxvbmcgc2l6ZSwgZ2ZwX3QgZmxhZ3MpCiB7CiAJdm9pZCAqcmV0OwogCi0JcmV0ID0g
X192bWFsbG9jKHNpemUsIGZsYWdzLCBQQUdFX0tFUk5FTCk7CisJcmV0ID0gX192bWFsbG9jKHNp
emUsIGZsYWdzKTsKIAlpZiAocmV0KSB7CiAJCXN0cnVjdCB2bV9hcmVhX3N0cnVjdCAqdm1hOwog
CkBAIC0yMzAsNyArMjMwLDcgQEAgbG9uZyB2d3JpdGUoY2hhciAqYnVmLCBjaGFyICphZGRyLCB1
bnNpZ25lZCBsb25nIGNvdW50KQogICovCiB2b2lkICp2bWFsbG9jKHVuc2lnbmVkIGxvbmcgc2l6
ZSkKIHsKLSAgICAgICByZXR1cm4gX192bWFsbG9jKHNpemUsIEdGUF9LRVJORUwgfCBfX0dGUF9I
SUdITUVNLCBQQUdFX0tFUk5FTCk7CisgICAgICAgcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBf
S0VSTkVMIHwgX19HRlBfSElHSE1FTSk7CiB9CiBFWFBPUlRfU1lNQk9MKHZtYWxsb2MpOwogCkBA
IC0yNDgsOCArMjQ4LDcgQEAgRVhQT1JUX1NZTUJPTCh2bWFsbG9jKTsKICAqLwogdm9pZCAqdnph
bGxvYyh1bnNpZ25lZCBsb25nIHNpemUpCiB7Ci0JcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBf
S0VSTkVMIHwgX19HRlBfSElHSE1FTSB8IF9fR0ZQX1pFUk8sCi0JCQlQQUdFX0tFUk5FTCk7CisJ
cmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBfS0VSTkVMIHwgX19HRlBfSElHSE1FTSB8IF9fR0ZQ
X1pFUk8pOwogfQogRVhQT1JUX1NZTUJPTCh2emFsbG9jKTsKIApAQCAtMzAyLDcgKzMwMSw3IEBA
IEVYUE9SVF9TWU1CT0wodnphbGxvY19ub2RlKTsKIAogdm9pZCAqdm1hbGxvY19leGVjKHVuc2ln
bmVkIGxvbmcgc2l6ZSkKIHsKLQlyZXR1cm4gX192bWFsbG9jKHNpemUsIEdGUF9LRVJORUwgfCBf
X0dGUF9ISUdITUVNLCBQQUdFX0tFUk5FTF9FWEVDKTsKKwlyZXR1cm4gX192bWFsbG9jKHNpemUs
IEdGUF9LRVJORUwgfCBfX0dGUF9ISUdITUVNKTsKIH0KIAogLyoqCkBAIC0zMTQsNyArMzEzLDcg
QEAgdm9pZCAqdm1hbGxvY19leGVjKHVuc2lnbmVkIGxvbmcgc2l6ZSkKICAqLwogdm9pZCAqdm1h
bGxvY18zMih1bnNpZ25lZCBsb25nIHNpemUpCiB7Ci0JcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBH
RlBfS0VSTkVMLCBQQUdFX0tFUk5FTCk7CisJcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBfS0VS
TkVMKTsKIH0KIEVYUE9SVF9TWU1CT0wodm1hbGxvY18zMik7CiAKZGlmZiAtLWdpdCBhL21tL3Bh
Z2VfYWxsb2MuYyBiL21tL3BhZ2VfYWxsb2MuYwppbmRleCA2OTgyN2Q0ZmEwNTIuLmQ0Mzc5MDI2
Y2M2MyAxMDA2NDQKLS0tIGEvbW0vcGFnZV9hbGxvYy5jCisrKyBiL21tL3BhZ2VfYWxsb2MuYwpA
QCAtODIzOCw3ICs4MjM4LDcgQEAgdm9pZCAqX19pbml0IGFsbG9jX2xhcmdlX3N5c3RlbV9oYXNo
KGNvbnN0IGNoYXIgKnRhYmxlbmFtZSwKIAkJCQl0YWJsZSA9IG1lbWJsb2NrX2FsbG9jX3Jhdyhz
aXplLAogCQkJCQkJCSAgIFNNUF9DQUNIRV9CWVRFUyk7CiAJCX0gZWxzZSBpZiAoZ2V0X29yZGVy
KHNpemUpID49IE1BWF9PUkRFUiB8fCBoYXNoZGlzdCkgewotCQkJdGFibGUgPSBfX3ZtYWxsb2Mo
c2l6ZSwgZ2ZwX2ZsYWdzLCBQQUdFX0tFUk5FTCk7CisJCQl0YWJsZSA9IF9fdm1hbGxvYyhzaXpl
LCBnZnBfZmxhZ3MpOwogCQkJdmlydCA9IHRydWU7CiAJCX0gZWxzZSB7CiAJCQkvKgpkaWZmIC0t
Z2l0IGEvbW0vcGVyY3B1LmMgYi9tbS9wZXJjcHUuYwppbmRleCBkN2UzYmM2NDlmNGUuLjFlMjc4
MDk5ZTE4NSAxMDA2NDQKLS0tIGEvbW0vcGVyY3B1LmMKKysrIGIvbW0vcGVyY3B1LmMKQEAgLTQ4
MSw3ICs0ODEsNyBAQCBzdGF0aWMgdm9pZCAqcGNwdV9tZW1femFsbG9jKHNpemVfdCBzaXplLCBn
ZnBfdCBnZnApCiAJaWYgKHNpemUgPD0gUEFHRV9TSVpFKQogCQlyZXR1cm4ga3phbGxvYyhzaXpl
LCBnZnApOwogCWVsc2UKLQkJcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBnZnAgfCBfX0dGUF9aRVJP
LCBQQUdFX0tFUk5FTCk7CisJCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwIHwgX19HRlBfWkVS
Tyk7CiB9CiAKIC8qKgpkaWZmIC0tZ2l0IGEvbW0vdm1hbGxvYy5jIGIvbW0vdm1hbGxvYy5jCmlu
ZGV4IDMzNGM3NTI1MWRkYi4uNDY2YTQ0OWIzYTE1IDEwMDY0NAotLS0gYS9tbS92bWFsbG9jLmMK
KysrIGIvbW0vdm1hbGxvYy5jCkBAIC0yNTYzLDkgKzI1NjMsOSBAQCBzdGF0aWMgdm9pZCAqX192
bWFsbG9jX25vZGUodW5zaWduZWQgbG9uZyBzaXplLCB1bnNpZ25lZCBsb25nIGFsaWduLAogCQkJ
CWdmcF9tYXNrLCBwcm90LCAwLCBub2RlLCBjYWxsZXIpOwogfQogCi12b2lkICpfX3ZtYWxsb2Mo
dW5zaWduZWQgbG9uZyBzaXplLCBnZnBfdCBnZnBfbWFzaywgcGdwcm90X3QgcHJvdCkKK3ZvaWQg
Kl9fdm1hbGxvYyh1bnNpZ25lZCBsb25nIHNpemUsIGdmcF90IGdmcF9tYXNrKQogewotCXJldHVy
biBfX3ZtYWxsb2Nfbm9kZShzaXplLCAxLCBnZnBfbWFzaywgcHJvdCwgTlVNQV9OT19OT0RFLAor
CXJldHVybiBfX3ZtYWxsb2Nfbm9kZShzaXplLCAxLCBnZnBfbWFzaywgUEFHRV9LRVJORUwsIE5V
TUFfTk9fTk9ERSwKIAkJCQlfX2J1aWx0aW5fcmV0dXJuX2FkZHJlc3MoMCkpOwogfQogRVhQT1JU
X1NZTUJPTChfX3ZtYWxsb2MpOwpkaWZmIC0tZ2l0IGEvbmV0L2JyaWRnZS9uZXRmaWx0ZXIvZWJ0
YWJsZXMuYyBiL25ldC9icmlkZ2UvbmV0ZmlsdGVyL2VidGFibGVzLmMKaW5kZXggNzhkYjU4Yzdh
ZWMyLi43ZTg2OTI4NGUwNTIgMTAwNjQ0Ci0tLSBhL25ldC9icmlkZ2UvbmV0ZmlsdGVyL2VidGFi
bGVzLmMKKysrIGIvbmV0L2JyaWRnZS9uZXRmaWx0ZXIvZWJ0YWJsZXMuYwpAQCAtMTA5NSwxNiAr
MTA5NSwxNCBAQCBzdGF0aWMgaW50IGRvX3JlcGxhY2Uoc3RydWN0IG5ldCAqbmV0LCBjb25zdCB2
b2lkIF9fdXNlciAqdXNlciwKIAl0bXAubmFtZVtzaXplb2YodG1wLm5hbWUpIC0gMV0gPSAwOwog
CiAJY291bnRlcnNpemUgPSBDT1VOVEVSX09GRlNFVCh0bXAubmVudHJpZXMpICogbnJfY3B1X2lk
czsKLQluZXdpbmZvID0gX192bWFsbG9jKHNpemVvZigqbmV3aW5mbykgKyBjb3VudGVyc2l6ZSwg
R0ZQX0tFUk5FTF9BQ0NPVU5ULAotCQkJICAgIFBBR0VfS0VSTkVMKTsKKwluZXdpbmZvID0gX192
bWFsbG9jKHNpemVvZigqbmV3aW5mbykgKyBjb3VudGVyc2l6ZSwgR0ZQX0tFUk5FTF9BQ0NPVU5U
KTsKIAlpZiAoIW5ld2luZm8pCiAJCXJldHVybiAtRU5PTUVNOwogCiAJaWYgKGNvdW50ZXJzaXpl
KQogCQltZW1zZXQobmV3aW5mby0+Y291bnRlcnMsIDAsIGNvdW50ZXJzaXplKTsKIAotCW5ld2lu
Zm8tPmVudHJpZXMgPSBfX3ZtYWxsb2ModG1wLmVudHJpZXNfc2l6ZSwgR0ZQX0tFUk5FTF9BQ0NP
VU5ULAotCQkJCSAgICAgUEFHRV9LRVJORUwpOworCW5ld2luZm8tPmVudHJpZXMgPSBfX3ZtYWxs
b2ModG1wLmVudHJpZXNfc2l6ZSwgR0ZQX0tFUk5FTF9BQ0NPVU5UKTsKIAlpZiAoIW5ld2luZm8t
PmVudHJpZXMpIHsKIAkJcmV0ID0gLUVOT01FTTsKIAkJZ290byBmcmVlX25ld2luZm87CmRpZmYg
LS1naXQgYS9zb3VuZC9jb3JlL21lbWFsbG9jLmMgYi9zb3VuZC9jb3JlL21lbWFsbG9jLmMKaW5k
ZXggYTgzNTUzZmJlZGYwLi5iZWE0NmVkMTU3YTYgMTAwNjQ0Ci0tLSBhL3NvdW5kL2NvcmUvbWVt
YWxsb2MuYworKysgYi9zb3VuZC9jb3JlL21lbWFsbG9jLmMKQEAgLTE0Myw3ICsxNDMsNyBAQCBp
bnQgc25kX2RtYV9hbGxvY19wYWdlcyhpbnQgdHlwZSwgc3RydWN0IGRldmljZSAqZGV2aWNlLCBz
aXplX3Qgc2l6ZSwKIAkJYnJlYWs7CiAJY2FzZSBTTkRSVl9ETUFfVFlQRV9WTUFMTE9DOgogCQln
ZnAgPSBzbmRfbWVtX2dldF9nZnBfZmxhZ3MoZGV2aWNlLCBHRlBfS0VSTkVMIHwgX19HRlBfSElH
SE1FTSk7Ci0JCWRtYWItPmFyZWEgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwLCBQQUdFX0tFUk5FTCk7
CisJCWRtYWItPmFyZWEgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwKTsKIAkJZG1hYi0+YWRkciA9IDA7
CiAJCWJyZWFrOwogI2lmZGVmIENPTkZJR19IQVNfRE1BCmRpZmYgLS1naXQgYS9zb3VuZC9jb3Jl
L3BjbV9tZW1vcnkuYyBiL3NvdW5kL2NvcmUvcGNtX21lbW9yeS5jCmluZGV4IGZjYWIzN2VhNjY0
MS4uODYwOTM1ZTNhZWE0IDEwMDY0NAotLS0gYS9zb3VuZC9jb3JlL3BjbV9tZW1vcnkuYworKysg
Yi9zb3VuZC9jb3JlL3BjbV9tZW1vcnkuYwpAQCAtNDYwLDcgKzQ2MCw3IEBAIGludCBfc25kX3Bj
bV9saWJfYWxsb2Nfdm1hbGxvY19idWZmZXIoc3RydWN0IHNuZF9wY21fc3Vic3RyZWFtICpzdWJz
dHJlYW0sCiAJCQlyZXR1cm4gMDsgLyogYWxyZWFkeSBsYXJnZSBlbm91Z2ggKi8KIAkJdmZyZWUo
cnVudGltZS0+ZG1hX2FyZWEpOwogCX0KLQlydW50aW1lLT5kbWFfYXJlYSA9IF9fdm1hbGxvYyhz
aXplLCBnZnBfZmxhZ3MsIFBBR0VfS0VSTkVMKTsKKwlydW50aW1lLT5kbWFfYXJlYSA9IF9fdm1h
bGxvYyhzaXplLCBnZnBfZmxhZ3MpOwogCWlmICghcnVudGltZS0+ZG1hX2FyZWEpCiAJCXJldHVy
biAtRU5PTUVNOwogCXJ1bnRpbWUtPmRtYV9ieXRlcyA9IHNpemU7Ci0tIAoyLjI1LjEKCl9fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkxpbmFyby1tbS1zaWcg
bWFpbGluZyBsaXN0CkxpbmFyby1tbS1zaWdAbGlzdHMubGluYXJvLm9yZwpodHRwczovL2xpc3Rz
LmxpbmFyby5vcmcvbWFpbG1hbi9saXN0aW5mby9saW5hcm8tbW0tc2lnCg==
