Return-Path: <linaro-mm-sig-bounces@lists.linaro.org>
X-Original-To: lists+linaro-mm-sig@lfdr.de
Delivered-To: lists+linaro-mm-sig@lfdr.de
Received: from lists.linaro.org (lists.linaro.org [107.22.173.205])
	by mail.lfdr.de (Postfix) with ESMTPS id 952911782BE
	for <lists+linaro-mm-sig@lfdr.de>; Tue,  3 Mar 2020 20:04:44 +0100 (CET)
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 669CA6182C
	for <lists+linaro-mm-sig@lfdr.de>; Tue,  3 Mar 2020 19:04:43 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
	id 58CFF619CD; Tue,  3 Mar 2020 19:04:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on lists.linaro.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.9 required=5.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_NONE,RCVD_IN_MSPIKE_H3,RCVD_IN_MSPIKE_WL,SPF_HELO_NONE
	autolearn=disabled version=3.4.2
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 286BA619B6;
	Tue,  3 Mar 2020 19:03:53 +0000 (UTC)
X-Original-To: linaro-mm-sig@lists.linaro.org
Delivered-To: linaro-mm-sig@lists.linaro.org
Received: from lists.linaro.org (localhost [127.0.0.1])
 by lists.linaro.org (Postfix) with ESMTP id 7E1196180F
 for <linaro-mm-sig@lists.linaro.org>; Tue,  3 Mar 2020 19:03:50 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
 id 6A660619B5; Tue,  3 Mar 2020 19:03:50 +0000 (UTC)
Received: from mail-pf1-f193.google.com (mail-pf1-f193.google.com
 [209.85.210.193])
 by lists.linaro.org (Postfix) with ESMTPS id C8AE6619D9
 for <linaro-mm-sig@lists.linaro.org>; Tue,  3 Mar 2020 19:03:38 +0000 (UTC)
Received: by mail-pf1-f193.google.com with SMTP id j9so1938370pfa.8
 for <linaro-mm-sig@lists.linaro.org>; Tue, 03 Mar 2020 11:03:38 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=ZcNjNR9eap06LKLBmYe4Bn+IxnxQJa41GvGAvg2pHUo=;
 b=t7aANDLqyeVHRN3kB4TsMlR323RhQxdxPtp405vUU+iDGHs+AV4/s9mFfxuWOljfS9
 OWSNSRaRFEMqJs6eIQK/RUia00x5CbkBrt5zsiJaN6qkPSGZYk95ExdiOvNEmsYe1f8D
 LXtbHUxFRAcRkhcK46gbpPUIWqJ1/Bp967LlvHn9KyqmkBCJInkkxB9jIzGbNxmtu+V3
 v7Dnc/TFj7qxA9Bn3tC9oSTdIDZt4RA2qNN9sYr1eGZ3MhRK5/AwjXpdu4JNl8poTsN1
 iwmybDrUfRDr+xcfKXhs9S5CqjciaTX6oDnuUhBo7gpWHxrKkBorSBgjVQ51kZdF4a3F
 Qipw==
X-Gm-Message-State: ANhLgQ0REcNSf9lfvyEcgyW9WQvkJkM2UQNJkXi/AQ3OC2QppvgFyWzh
 x9GK+B9BFtuL2FUeVV8htT+RUA==
X-Google-Smtp-Source: ADFU+vvva4bHtyoXKpEMnmYH5AvGg9vla+sal5g4PwgWDeli6nHCQocQ6ABV1JODStdxy4jxHqMSiA==
X-Received: by 2002:aa7:8426:: with SMTP id q6mr5387748pfn.221.1583262217581; 
 Tue, 03 Mar 2020 11:03:37 -0800 (PST)
Received: from omlet.com ([2605:6000:1026:c273::faf])
 by smtp.gmail.com with ESMTPSA id x3sm8034pjq.5.2020.03.03.11.03.35
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Tue, 03 Mar 2020 11:03:36 -0800 (PST)
From: Jason Ekstrand <jason@jlekstrand.net>
To: 
Date: Tue,  3 Mar 2020 13:03:16 -0600
Message-Id: <20200303190318.522103-1-jason@jlekstrand.net>
X-Mailer: git-send-email 2.24.1
In-Reply-To: <20200226180937.106875-1-jason@jlekstrand.net>
References: <20200226180937.106875-1-jason@jlekstrand.net>
MIME-Version: 1.0
X-Virus-Scanned: ClamAV using ClamSMTP
Cc: Chenbo Feng <fengc@google.com>, daniels@collabora.com, jajones@nvidia.com,
 bas@basnieuwenhuizen.nl, linux-kernel@vger.kernel.org,
 Greg Hackmann <ghackmann@google.com>, linaro-mm-sig@lists.linaro.org,
 hoegsberg@google.com, dri-devel@lists.freedesktop.org,
 Jason Ekstrand <jason@jlekstrand.net>, jessehall@google.com,
 airlied@redhat.com, christian.koenig@amd.com, linux-media@vger.kernel.org
Subject: [Linaro-mm-sig] [PATCH] RFC: dma-buf: Add an API for importing and
	exporting sync files (v3)
X-BeenThere: linaro-mm-sig@lists.linaro.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: "Unified memory management interest group."
 <linaro-mm-sig.lists.linaro.org>
List-Unsubscribe: <https://lists.linaro.org/mailman/options/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=unsubscribe>
List-Archive: <http://lists.linaro.org/pipermail/linaro-mm-sig/>
List-Post: <mailto:linaro-mm-sig@lists.linaro.org>
List-Help: <mailto:linaro-mm-sig-request@lists.linaro.org?subject=help>
List-Subscribe: <https://lists.linaro.org/mailman/listinfo/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linaro-mm-sig-bounces@lists.linaro.org
Sender: "Linaro-mm-sig" <linaro-mm-sig-bounces@lists.linaro.org>
X-Virus-Scanned: ClamAV using ClamSMTP

RXhwbGljaXQgc3luY2hyb25pemF0aW9uIGlzIHRoZSBmdXR1cmUuICBBdCBsZWFzdCwgdGhhdCBz
ZWVtcyB0byBiZSB3aGF0Cm1vc3QgdXNlcnNwYWNlIEFQSXMgYXJlIGFncmVlaW5nIG9uIGF0IHRo
aXMgcG9pbnQuICBIb3dldmVyLCBtb3N0IG9mIG91cgpMaW51eCBBUElzIChib3RoIHVzZXJzcGFj
ZSBhbmQga2VybmVsIFVBUEkpIGFyZSBjdXJyZW50bHkgYnVpbHQgYXJvdW5kCmltcGxpY2l0IHN5
bmNocm9uaXphdGlvbiB3aXRoIGRtYS1idWYuICBXaGlsZSB3b3JrIGlzIG9uZ29pbmcgdG8gY2hh
bmdlCm1hbnkgb2YgdGhlIHVzZXJzcGFjZSBBUElzIGFuZCBwcm90b2NvbHMgdG8gYW4gZXhwbGlj
aXQgc3luY2hyb25pemF0aW9uCm1vZGVsLCBzd2l0Y2hpbmcgb3ZlciBwaWVjZW1lYWwgaXMgZGlm
ZmljdWx0IGR1ZSB0byB0aGUgbnVtYmVyIG9mCnBvdGVudGlhbCBjb21wb25lbnRzIGludm9sdmVk
LiAgT24gdGhlIGtlcm5lbCBzaWRlLCBtYW55IGRyaXZlcnMgdXNlCmRtYS1idWYgaW5jbHVkaW5n
IEdQVSAoM0QvY29tcHV0ZSksIGRpc3BsYXksIHY0bCwgYW5kIG90aGVycy4gIEluCnVzZXJzcGFj
ZSwgd2UgaGF2ZSBYMTEsIHNldmVyYWwgV2F5bGFuZCBjb21wb3NpdG9ycywgM0QgZHJpdmVycywg
Y29tcHV0ZQpkcml2ZXJzIChPcGVuQ0wgZXRjLiksIG1lZGlhIGVuY29kZS9kZWNvZGUsIGFuZCB0
aGUgbGlzdCBnb2VzIG9uLgoKVGhpcyBwYXRjaCBwcm92aWRlcyBhIHBhdGggZm9yd2FyZCBieSBh
bGxvd2luZyB1c2Vyc3BhY2UgdG8gbWFudWFsbHkKbWFuYWdlIHRoZSBmZW5jZXMgYXR0YWNoZWQg
dG8gYSBkbWEtYnVmLiAgQWx0ZXJuYXRpdmVseSwgb25lIGNhbiB0aGluawpvZiB0aGlzIGFzIG1h
a2luZyBkbWEtYnVmJ3MgaW1wbGljaXQgc3luY2hyb25pemF0aW9uIHNpbXBseSBhIGNhcnJpZXIK
Zm9yIGFuIGV4cGxpY2l0IGZlbmNlLiAgVGhpcyBpcyBhY2NvbXBsaXNoZWQgYnkgYWRkaW5nIHR3
byBJT0NUTHMgdG8KZG1hLWJ1ZiBmb3IgaW1wb3J0aW5nIGFuZCBleHBvcnRpbmcgYSBzeW5jIGZp
bGUgdG8vZnJvbSB0aGUgZG1hLWJ1Zi4KVGhpcyB3YXkgYSB1c2Vyc3BhY2UgY29tcG9uZW50IHdo
aWNoIGlzIHVzZXMgZXhwbGljaXQgc3luY2hyb25pemF0aW9uLApzdWNoIGFzIGEgVnVsa2FuIGRy
aXZlciwgY2FuIG1hbnVhbGx5IHNldCB0aGUgd3JpdGUgZmVuY2Ugb24gYSBidWZmZXIKYmVmb3Jl
IGhhbmRpbmcgaXQgb2ZmIHRvIGFuIGltcGxpY2l0bHkgc3luY2hyb25pemVkIGNvbXBvbmVudCBz
dWNoIGFzIGEKV2F5bGFuZCBjb21wb3NpdG9yIG9yIHZpZGVvIGVuY29kZXIuICBJbiB0aGlzIHdh
eSwgZWFjaCBvZiB0aGUgZGlmZmVyZW50CmNvbXBvbmVudHMgY2FuIGJlIHVwZ3JhZGVkIHRvIGFu
IGV4cGxpY2l0IHN5bmNocm9uaXphdGlvbiBtb2RlbCBvbmUgYXQgYQp0aW1lIGFzIGxvbmcgYXMg
dGhlIHVzZXJzcGFjZSBwaWVjZXMgY29ubmVjdGluZyB0aGVtIGFyZSBhd2FyZSBvZiBpdCBhbmQK
aW1wb3J0L2V4cG9ydCBmZW5jZXMgYXQgdGhlIHJpZ2h0IHRpbWVzLgoKVGhlcmUgaXMgYSBwb3Rl
bnRpYWwgcmFjZSBjb25kaXRpb24gd2l0aCB0aGlzIEFQSSBpZiB1c2Vyc3BhY2UgaXMgbm90CmNh
cmVmdWwuICBBIHR5cGljYWwgdXNlIGNhc2UgZm9yIGltcGxpY2l0IHN5bmNocm9uaXphdGlvbiBp
cyB0byB3YWl0IGZvcgp0aGUgZG1hLWJ1ZiB0byBiZSByZWFkeSwgdXNlIGl0LCBhbmQgdGhlbiBz
aWduYWwgaXQgZm9yIHNvbWUgb3RoZXIKY29tcG9uZW50LiAgQmVjYXVzZSBhIHN5bmNfZmlsZSBj
YW5ub3QgYmUgY3JlYXRlZCB1bnRpbCBpdCBpcyBndWFyYW50ZWVkCnRvIGNvbXBsZXRlIGluIGZp
bml0ZSB0aW1lLCB1c2Vyc3BhY2UgY2FuIG9ubHkgc2lnbmFsIHRoZSBkbWEtYnVmIGFmdGVyCml0
IGhhcyBhbHJlYWR5IHN1Ym1pdHRlZCB0aGUgd29yayB3aGljaCB1c2VzIGl0IHRvIHRoZSBrZXJu
ZWwgYW5kIGhhcwpyZWNlaXZlZCBhIHN5bmNfZmlsZSBiYWNrLiAgVGhlcmUgaXMgbm8gd2F5IHRv
IGF0b21pY2FsbHkgc3VibWl0IGEKd2FpdC11c2Utc2lnbmFsIG9wZXJhdGlvbi4gIFRoaXMgaXMg
bm90LCBob3dldmVyLCByZWFsbHkgYSBwcm9ibGVtIHdpdGgKdGhpcyBBUEkgc28gbXVjaCBhcyBp
dCBpcyBhIHByb2JsZW0gd2l0aCBleHBsaWNpdCBzeW5jaHJvbml6YXRpb24KaXRzZWxmLiAgVGhl
IHdheSB0aGlzIGlzIHR5cGljYWxseSBoYW5kbGVkIGlzIHRvIGhhdmUgdmVyeSBleHBsaWNpdApv
d25lcnNoaXAgdHJhbnNmZXIgcG9pbnRzIGluIHRoZSBBUEkgb3IgcHJvdG9jb2wgd2hpY2ggZW5z
dXJlIHRoYXQgb25seQpvbmUgY29tcG9uZW50IGlzIHVzaW5nIGl0IGF0IGFueSBnaXZlbiB0aW1l
LiAgQm90aCBYMTEgKHZpYSB0aGUgUFJFU0VOVApleHRlbnNpb24pIGFuZCBXYXlsYW5kIHByb3Zp
ZGUgc3VjaCBvd25lcnNoaXAgdHJhbnNmZXIgcG9pbnRzIHZpYQpleHBsaWNpdCBwcmVzZW50IGFu
ZCBpZGxlIG1lc3NhZ2VzLgoKVGhlIGRlY2lzaW9uIHdhcyBpbnRlbnRpb25hbGx5IG1hZGUgaW4g
dGhpcyBwYXRjaCB0byBtYWtlIHRoZSBpbXBvcnQgYW5kCmV4cG9ydCBvcGVyYXRpb25zIElPQ1RM
cyBvbiB0aGUgZG1hLWJ1ZiBpdHNlbGYgcmF0aGVyIHRoYW4gYXMgYSBEUk0KSU9DVEwuICBUaGlz
IG1ha2VzIGl0IHRoZSBpbXBvcnQvZXhwb3J0IG9wZXJhdGlvbiB1bml2ZXJzYWwgYWNyb3NzIGFs
bApjb21wb25lbnRzIHdoaWNoIHVzZSBkbWEtYnVmIGluY2x1ZGluZyBHUFUsIGRpc3BsYXksIHY0
bCwgYW5kIG90aGVycy4KSXQgYWxzbyBtZWFucyB0aGF0IGEgdXNlcnNwYWNlIGNvbXBvbmVudCBj
YW4gZG8gdGhlIGltcG9ydC9leHBvcnQKd2l0aG91dCBhY2Nlc3MgdG8gdGhlIERSTSBmZCB3aGlj
aCBtYXkgYmUgdHJpY2t5IHRvIGdldCBpbiBjYXNlcyB3aGVyZQp0aGUgY2xpZW50IGNvbW11bmlj
YXRlcyB3aXRoIERSTSB2aWEgYSB1c2Vyc3BhY2UgQVBJIHN1Y2ggYXMgT3BlbkdMIG9yClZ1bGth
bi4gIEF0IGEgZnV0dXJlIGRhdGUgd2UgbWF5IGNob29zZSB0byBhZGQgZGlyZWN0IGltcG9ydC9l
eHBvcnQgQVBJcwp0byBjb21wb25lbnRzIHN1Y2ggYXMgZHJtX3N5bmNvYmogdG8gYXZvaWQgYWxs
b2NhdGluZyBhIGZpbGUgZGVzY3JpcHRvcgphbmQgZ29pbmcgdGhyb3VnaCB0d28gaW9jdGxzLiAg
SG93ZXZlciwgdGhhdCBzZWVtcyB0byBiZSBzb21ldGhpbmcgb2YgYQptaWNyby1vcHRpbWl6YXRp
b24gYXMgaW1wb3J0L2V4cG9ydCBvcGVyYXRpb25zIGFyZSBsaWtlbHkgdG8gaGFwcGVuIGF0IGEK
cmF0ZSBvZiBhIGZldyBwZXIgZnJhbWUgb2YgcmVuZGVyZWQgb3IgZGVjb2RlZCB2aWRlby4KCnYy
IChKYXNvbiBFa3N0cmFuZCk6CiAtIFVzZSBhIHdyYXBwZXIgZG1hX2ZlbmNlX2FycmF5IG9mIGFs
bCBmZW5jZXMgaW5jbHVkaW5nIHRoZSBuZXcgb25lCiAgIHdoZW4gaW1wb3J0aW5nIGFuIGV4Y2x1
c2l2ZSBmZW5jZS4KCnYzIChKYXNvbiBFa3N0cmFuZCk6CiAtIExvY2sgYXJvdW5kIHNldHRpbmcg
c2hhcmVkIGZlbmNlcyBhcyB3ZWxsIGFzIGV4Y2x1c2l2ZQogLSBNYXJrIFNJR05BTF9TWU5DX0ZJ
TEUgYXMgYSByZWFkLXdyaXRlIGlvY3RsLgogLSBJbml0aWFsaXplIHJldCB0byAwIGluIGRtYV9i
dWZfd2FpdF9zeW5jX2ZpbGUKClNpZ25lZC1vZmYtYnk6IEphc29uIEVrc3RyYW5kIDxqYXNvbkBq
bGVrc3RyYW5kLm5ldD4KLS0tCiBkcml2ZXJzL2RtYS1idWYvZG1hLWJ1Zi5jICAgIHwgMTY0ICsr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiBpbmNsdWRlL3VhcGkvbGludXgvZG1h
LWJ1Zi5oIHwgIDEzICsrLQogMiBmaWxlcyBjaGFuZ2VkLCAxNzUgaW5zZXJ0aW9ucygrKSwgMiBk
ZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2RtYS1idWYvZG1hLWJ1Zi5jIGIvZHJp
dmVycy9kbWEtYnVmL2RtYS1idWYuYwppbmRleCBkNDA5Nzg1NmM4NmIuLjJjNDYwOGJhZTNjMiAx
MDA2NDQKLS0tIGEvZHJpdmVycy9kbWEtYnVmL2RtYS1idWYuYworKysgYi9kcml2ZXJzL2RtYS1i
dWYvZG1hLWJ1Zi5jCkBAIC0yMCw2ICsyMCw3IEBACiAjaW5jbHVkZSA8bGludXgvZGVidWdmcy5o
PgogI2luY2x1ZGUgPGxpbnV4L21vZHVsZS5oPgogI2luY2x1ZGUgPGxpbnV4L3NlcV9maWxlLmg+
CisjaW5jbHVkZSA8bGludXgvc3luY19maWxlLmg+CiAjaW5jbHVkZSA8bGludXgvcG9sbC5oPgog
I2luY2x1ZGUgPGxpbnV4L2RtYS1yZXN2Lmg+CiAjaW5jbHVkZSA8bGludXgvbW0uaD4KQEAgLTM0
OCw2ICszNDksMTYzIEBAIHN0YXRpYyBsb25nIGRtYV9idWZfc2V0X25hbWUoc3RydWN0IGRtYV9i
dWYgKmRtYWJ1ZiwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZikKIAlyZXR1cm4gcmV0OwogfQogCisv
KiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcmVmIHRvIGFkZF9mZW5jZSBvbiBzdWNjZXNzLiAgVGhl
IGNhbGxlciBzdGlsbAorICogb3ducyBpdHMgcmVmIGFuZCBoYXMgdG8gZG1hX2ZlbmNlX3B1dCBp
dC4KKyAqLworc3RhdGljIHN0cnVjdCBkbWFfZmVuY2UgKmRtYV9idWZfZ2V0X3VuaWZpZWRfZmVu
Y2Uoc3RydWN0IGRtYV9idWYgKmRtYWJ1ZiwKKwkJCQkJCSAgIHN0cnVjdCBkbWFfZmVuY2UgKmFk
ZF9mZW5jZSkKK3sKKwlzdHJ1Y3QgZG1hX2ZlbmNlICoqZmVuY2VzID0gTlVMTDsKKwlzdHJ1Y3Qg
ZG1hX2ZlbmNlX2FycmF5ICphcnJheTsKKwl1bnNpZ25lZCBpLCBudW1fZmVuY2VzID0gMDsKKwlp
bnQgcmV0OworCisJcmV0ID0gZG1hX3Jlc3ZfZ2V0X2ZlbmNlc19yY3UoZG1hYnVmLT5yZXN2LCBO
VUxMLAorCQkJCSAgICAgICZudW1fZmVuY2VzLCAmZmVuY2VzKTsKKwlpZiAocmV0KQorCQlyZXR1
cm4gTlVMTDsgLyogcmV0IGNhbiBvbmx5IGJlIDAgb3IgLUVOT01FTSAqLworCisJaWYgKG51bV9m
ZW5jZXMgPT0gMCkgeworCQlpZiAoYWRkX2ZlbmNlKSB7CisJCQlyZXR1cm4gYWRkX2ZlbmNlOwor
CQl9IGVsc2UgeworCQkJcmV0dXJuIGRtYV9mZW5jZV9nZXRfc3R1YigpOworCQl9CisJfSBlbHNl
IGlmIChudW1fZmVuY2VzID09IDEgJiYgKCFhZGRfZmVuY2UgfHwgYWRkX2ZlbmNlID09IGZlbmNl
c1swXSkpIHsKKwkJc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UgPSBmZW5jZXNbMF07CisJCWtmcmVl
KGZlbmNlcyk7CisJCXJldHVybiBmZW5jZTsKKwl9CisKKwlpZiAoYWRkX2ZlbmNlKSB7CisJCXN0
cnVjdCBkbWFfZmVuY2UgKipuZmVuY2VzOworCQlzaXplX3Qgc3o7CisKKwkJLyogR2V0IGEgcmVm
IHRvIGFkZF9mZW5jZSBzbyB0aGF0IHdlIGhhdmUgYSByZWYgdG8gZXZlcnkKKwkJICogZmVuY2Ug
d2UgYXJlIGdvaW5nIHRvIHB1dCBpbiB0aGUgYXJyYXkuCisJCSAqLworCQlkbWFfZmVuY2VfZ2V0
KGFkZF9mZW5jZSk7CisKKwkJc3ogPSAobnVtX2ZlbmNlcyArIDEpICogc2l6ZW9mKCpmZW5jZXMp
OworCQluZmVuY2VzID0ga3JlYWxsb2MoZmVuY2VzLCBzeiwgR0ZQX05PV0FJVCB8IF9fR0ZQX05P
V0FSTik7CisJCWlmICghbmZlbmNlcykKKwkJCWdvdG8gZXJyX3B1dF9mZW5jZXM7CisKKwkJbmZl
bmNlc1tudW1fZmVuY2VzKytdID0gYWRkX2ZlbmNlOworCX0KKworCWFycmF5ID0gZG1hX2ZlbmNl
X2FycmF5X2NyZWF0ZShudW1fZmVuY2VzLCBmZW5jZXMsCisJCQkJICAgICAgIGRtYV9mZW5jZV9j
b250ZXh0X2FsbG9jKDEpLAorCQkJCSAgICAgICAxLCBmYWxzZSk7CisJaWYgKCFhcnJheSkKKwkJ
Z290byBlcnJfcHV0X2ZlbmNlczsKKworCS8qIFRoZSBmZW5jZSBhcnJheSBub3cgb3ducyBmZW5j
ZXNfYXJyIGFuZCBvdXIgcmVmZXJlbmNlcyB0byBlYWNoCisJICogb2YgdGhlIGluZGl2aWR1YWwg
ZmVuY2VzLiAgV2Ugb25seSBvd24gYSByZWZlcmVuY2UgdG8gdGhlIG9uZQorCSAqIGFycmF5IGZl
bmNlLgorCSAqLworCisJcmV0dXJuICZhcnJheS0+YmFzZTsKKworZXJyX3B1dF9mZW5jZXM6CisJ
Zm9yIChpID0gMDsgaSA8IG51bV9mZW5jZXM7IGkrKykKKwkJZG1hX2ZlbmNlX3B1dChmZW5jZXNb
MF0pOworCWRtYV9mZW5jZV9wdXQoYWRkX2ZlbmNlKTsKKwlrZnJlZShmZW5jZXMpOworCXJldHVy
biBOVUxMOworfQorCitzdGF0aWMgbG9uZyBkbWFfYnVmX3dhaXRfc3luY19maWxlKHN0cnVjdCBk
bWFfYnVmICpkbWFidWYsCisJCQkJICAgY29uc3Qgdm9pZCBfX3VzZXIgKnVzZXJfZGF0YSkKK3sK
KwlzdHJ1Y3QgZG1hX2J1Zl9zeW5jX2ZpbGUgYXJnOworCXN0cnVjdCBkbWFfZmVuY2UgKmZlbmNl
LCAqdW5pZmllZF9mZW5jZTsKKwlpbnQgcmV0ID0gMDsKKworCWlmIChjb3B5X2Zyb21fdXNlcigm
YXJnLCB1c2VyX2RhdGEsIHNpemVvZihhcmcpKSkKKwkJcmV0dXJuIC1FRkFVTFQ7CisKKwlpZiAo
YXJnLmZsYWdzICE9IDAgJiYgYXJnLmZsYWdzICE9IERNQV9CVUZfU1lOQ19GSUxFX1NZTkNfV1JJ
VEUpCisJCXJldHVybiAtRUlOVkFMOworCisJZmVuY2UgPSBzeW5jX2ZpbGVfZ2V0X2ZlbmNlKGFy
Zy5mZCk7CisJaWYgKCFmZW5jZSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlkbWFfcmVzdl9sb2Nr
KGRtYWJ1Zi0+cmVzdiwgTlVMTCk7CisKKwlpZiAoYXJnLmZsYWdzICYgRE1BX0JVRl9TWU5DX0ZJ
TEVfU1lOQ19XUklURSkgeworCQl1bmlmaWVkX2ZlbmNlID0gZG1hX2J1Zl9nZXRfdW5pZmllZF9m
ZW5jZShkbWFidWYsIGZlbmNlKTsKKwkJaWYgKHVuaWZpZWRfZmVuY2UpCisJCQlkbWFfcmVzdl9h
ZGRfZXhjbF9mZW5jZShkbWFidWYtPnJlc3YsIGZlbmNlKTsKKwkJZWxzZQorCQkJcmV0ID0gLUVO
T01FTTsKKwl9IGVsc2UgeworCQlkbWFfcmVzdl9hZGRfc2hhcmVkX2ZlbmNlKGRtYWJ1Zi0+cmVz
diwgZmVuY2UpOworCX0KKworCWRtYV9yZXN2X3VubG9jayhkbWFidWYtPnJlc3YpOworCisJZG1h
X2ZlbmNlX3B1dChmZW5jZSk7CisKKwlyZXR1cm4gcmV0OworfQorCitzdGF0aWMgbG9uZyBkbWFf
YnVmX3NpZ25hbF9zeW5jX2ZpbGUoc3RydWN0IGRtYV9idWYgKmRtYWJ1ZiwKKwkJCQkgICAgIHZv
aWQgX191c2VyICp1c2VyX2RhdGEpCit7CisJc3RydWN0IGRtYV9idWZfc3luY19maWxlIGFyZzsK
KwlzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSA9IE5VTEw7CisJc3RydWN0IHN5bmNfZmlsZSAqc3lu
Y19maWxlOworCWludCBmZCwgcmV0OworCisJaWYgKGNvcHlfZnJvbV91c2VyKCZhcmcsIHVzZXJf
ZGF0YSwgc2l6ZW9mKGFyZykpKQorCQlyZXR1cm4gLUVGQVVMVDsKKworCWlmIChhcmcuZmxhZ3Mg
IT0gMCAmJiBhcmcuZmxhZ3MgIT0gRE1BX0JVRl9TWU5DX0ZJTEVfU1lOQ19XUklURSkKKwkJcmV0
dXJuIC1FSU5WQUw7CisKKwlmZCA9IGdldF91bnVzZWRfZmRfZmxhZ3MoT19DTE9FWEVDKTsKKwlp
ZiAoZmQgPCAwKQorCQlyZXR1cm4gZmQ7CisKKwlpZiAoYXJnLmZsYWdzICYgRE1BX0JVRl9TWU5D
X0ZJTEVfU1lOQ19XUklURSkgeworCQkvKiBXZSBuZWVkIHRvIGluY2x1ZGUgYm90aCB0aGUgZXhj
bHVzaXZlIGZlbmNlIGFuZCBhbGwgb2YKKwkJICogdGhlIHNoYXJlZCBmZW5jZXMgaW4gb3VyIGZl
bmNlLgorCQkgKi8KKwkJZmVuY2UgPSBkbWFfYnVmX2dldF91bmlmaWVkX2ZlbmNlKGRtYWJ1Ziwg
TlVMTCk7CisJCWlmICghZmVuY2UpIHsKKwkJCXJldCA9IC1FTk9NRU07CisJCQlnb3RvIGVycl9w
dXRfZmQ7CisJCX0KKwl9IGVsc2UgeworCQlmZW5jZSA9IGRtYV9yZXN2X2dldF9leGNsX3JjdShk
bWFidWYtPnJlc3YpOworCQlpZiAoIWZlbmNlKQorCQkJZmVuY2UgPSBkbWFfZmVuY2VfZ2V0X3N0
dWIoKTsKKwl9CisKKwlzeW5jX2ZpbGUgPSBzeW5jX2ZpbGVfY3JlYXRlKGZlbmNlKTsKKworCWRt
YV9mZW5jZV9wdXQoZmVuY2UpOworCisJaWYgKCFzeW5jX2ZpbGUpIHsKKwkJcmV0ID0gLUVJTlZB
TDsKKwkJZ290byBlcnJfcHV0X2ZkOworCX0KKworCWZkX2luc3RhbGwoZmQsIHN5bmNfZmlsZS0+
ZmlsZSk7CisKKwlhcmcuZmQgPSBmZDsKKwlpZiAoY29weV90b191c2VyKHVzZXJfZGF0YSwgJmFy
Zywgc2l6ZW9mKGFyZykpKQorCQlyZXR1cm4gLUVGQVVMVDsKKworCXJldHVybiAwOworCitlcnJf
cHV0X2ZkOgorCXB1dF91bnVzZWRfZmQoZmQpOworCXJldHVybiByZXQ7Cit9CisKIHN0YXRpYyBs
b25nIGRtYV9idWZfaW9jdGwoc3RydWN0IGZpbGUgKmZpbGUsCiAJCQkgIHVuc2lnbmVkIGludCBj
bWQsIHVuc2lnbmVkIGxvbmcgYXJnKQogewpAQCAtMzkwLDYgKzU0OCwxMiBAQCBzdGF0aWMgbG9u
ZyBkbWFfYnVmX2lvY3RsKHN0cnVjdCBmaWxlICpmaWxlLAogCWNhc2UgRE1BX0JVRl9TRVRfTkFN
RToKIAkJcmV0dXJuIGRtYV9idWZfc2V0X25hbWUoZG1hYnVmLCAoY29uc3QgY2hhciBfX3VzZXIg
KilhcmcpOwogCisJY2FzZSBETUFfQlVGX0lPQ1RMX1dBSVRfU1lOQ19GSUxFOgorCQlyZXR1cm4g
ZG1hX2J1Zl93YWl0X3N5bmNfZmlsZShkbWFidWYsIChjb25zdCB2b2lkIF9fdXNlciAqKWFyZyk7
CisKKwljYXNlIERNQV9CVUZfSU9DVExfU0lHTkFMX1NZTkNfRklMRToKKwkJcmV0dXJuIGRtYV9i
dWZfc2lnbmFsX3N5bmNfZmlsZShkbWFidWYsICh2b2lkIF9fdXNlciAqKWFyZyk7CisKIAlkZWZh
dWx0OgogCQlyZXR1cm4gLUVOT1RUWTsKIAl9CmRpZmYgLS1naXQgYS9pbmNsdWRlL3VhcGkvbGlu
dXgvZG1hLWJ1Zi5oIGIvaW5jbHVkZS91YXBpL2xpbnV4L2RtYS1idWYuaAppbmRleCBkYmM3MDky
ZTA0YjUuLjg2ZTA3YWNjYTkwYyAxMDA2NDQKLS0tIGEvaW5jbHVkZS91YXBpL2xpbnV4L2RtYS1i
dWYuaAorKysgYi9pbmNsdWRlL3VhcGkvbGludXgvZG1hLWJ1Zi5oCkBAIC0zNyw4ICszNywxNyBA
QCBzdHJ1Y3QgZG1hX2J1Zl9zeW5jIHsKIAogI2RlZmluZSBETUFfQlVGX05BTUVfTEVOCTMyCiAK
K3N0cnVjdCBkbWFfYnVmX3N5bmNfZmlsZSB7CisJX191MzIgZmxhZ3M7CisJX19zMzIgZmQ7Cit9
OworCisjZGVmaW5lIERNQV9CVUZfU1lOQ19GSUxFX1NZTkNfV1JJVEUJKDEgPDwgMCkKKwogI2Rl
ZmluZSBETUFfQlVGX0JBU0UJCSdiJwotI2RlZmluZSBETUFfQlVGX0lPQ1RMX1NZTkMJX0lPVyhE
TUFfQlVGX0JBU0UsIDAsIHN0cnVjdCBkbWFfYnVmX3N5bmMpCi0jZGVmaW5lIERNQV9CVUZfU0VU
X05BTUUJX0lPVyhETUFfQlVGX0JBU0UsIDEsIGNvbnN0IGNoYXIgKikKKyNkZWZpbmUgRE1BX0JV
Rl9JT0NUTF9TWU5DCSAgICBfSU9XKERNQV9CVUZfQkFTRSwgMCwgc3RydWN0IGRtYV9idWZfc3lu
YykKKyNkZWZpbmUgRE1BX0JVRl9TRVRfTkFNRQkgICAgX0lPVyhETUFfQlVGX0JBU0UsIDEsIGNv
bnN0IGNoYXIgKikKKyNkZWZpbmUgRE1BX0JVRl9JT0NUTF9XQUlUX1NZTkNfRklMRQlfSU9XKERN
QV9CVUZfQkFTRSwgMiwgc3RydWN0IGRtYV9idWZfc3luYykKKyNkZWZpbmUgRE1BX0JVRl9JT0NU
TF9TSUdOQUxfU1lOQ19GSUxFCV9JT1dSKERNQV9CVUZfQkFTRSwgMywgc3RydWN0IGRtYV9idWZf
c3luYykKIAogI2VuZGlmCi0tIAoyLjI0LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fCkxpbmFyby1tbS1zaWcgbWFpbGluZyBsaXN0CkxpbmFyby1tbS1z
aWdAbGlzdHMubGluYXJvLm9yZwpodHRwczovL2xpc3RzLmxpbmFyby5vcmcvbWFpbG1hbi9saXN0
aW5mby9saW5hcm8tbW0tc2lnCg==
