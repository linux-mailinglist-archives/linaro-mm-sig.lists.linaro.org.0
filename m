Return-Path: <linaro-mm-sig-bounces@lists.linaro.org>
X-Original-To: lists+linaro-mm-sig@lfdr.de
Delivered-To: lists+linaro-mm-sig@lfdr.de
Received: from lists.linaro.org (lists.linaro.org [107.22.173.205])
	by mail.lfdr.de (Postfix) with ESMTPS id 134111B6D90
	for <lists+linaro-mm-sig@lfdr.de>; Fri, 24 Apr 2020 07:53:58 +0200 (CEST)
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 39B9F60E25
	for <lists+linaro-mm-sig@lfdr.de>; Fri, 24 Apr 2020 05:53:57 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
	id 27E65619C1; Fri, 24 Apr 2020 05:53:57 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on lists.linaro.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.2 required=5.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI,SPF_HELO_NONE,URIBL_SBL,URIBL_SBL_A
	autolearn=disabled version=3.4.2
Received: from lists.linaro.org (localhost [127.0.0.1])
	by lists.linaro.org (Postfix) with ESMTP id 047756654B;
	Fri, 24 Apr 2020 05:30:06 +0000 (UTC)
X-Original-To: linaro-mm-sig@lists.linaro.org
Delivered-To: linaro-mm-sig@lists.linaro.org
Received: from lists.linaro.org (localhost [127.0.0.1])
 by lists.linaro.org (Postfix) with ESMTP id 9524F665FF
 for <linaro-mm-sig@lists.linaro.org>; Wed,  8 Apr 2020 12:01:28 +0000 (UTC)
Received: by lists.linaro.org (Postfix, from userid 109)
 id 8655166614; Wed,  8 Apr 2020 12:01:28 +0000 (UTC)
Received: from bombadil.infradead.org (bombadil.infradead.org
 [198.137.202.133])
 by lists.linaro.org (Postfix) with ESMTPS id BF27F66631
 for <linaro-mm-sig@lists.linaro.org>; Wed,  8 Apr 2020 12:01:13 +0000 (UTC)
Received: from [2001:4bb8:180:5765:65b6:f11e:f109:b151] (helo=localhost)
 by bombadil.infradead.org with esmtpsa (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jM9Nq-0005Ub-BC; Wed, 08 Apr 2020 12:00:42 +0000
From: Christoph Hellwig <hch@lst.de>
To: Andrew Morton <akpm@linux-foundation.org>,
 "K. Y. Srinivasan" <kys@microsoft.com>,
 Haiyang Zhang <haiyangz@microsoft.com>,
 Stephen Hemminger <sthemmin@microsoft.com>, Wei Liu <wei.liu@kernel.org>,
 x86@kernel.org, David Airlie <airlied@linux.ie>,
 Daniel Vetter <daniel@ffwll.ch>, Laura Abbott <labbott@redhat.com>,
 Sumit Semwal <sumit.semwal@linaro.org>,
 Sakari Ailus <sakari.ailus@linux.intel.com>,
 Minchan Kim <minchan@kernel.org>, Nitin Gupta <ngupta@vflare.org>
Date: Wed,  8 Apr 2020 13:59:18 +0200
Message-Id: <20200408115926.1467567-21-hch@lst.de>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20200408115926.1467567-1-hch@lst.de>
References: <20200408115926.1467567-1-hch@lst.de>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by
 bombadil.infradead.org. See http://www.infradead.org/rpr.html
X-Virus-Scanned: ClamAV using ClamSMTP
X-Mailman-Approved-At: Fri, 24 Apr 2020 05:29:38 +0000
Cc: Christophe Leroy <christophe.leroy@c-s.fr>, linux-arch@vger.kernel.org,
 linux-hyperv@vger.kernel.org, linux-s390@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>, linuxppc-dev@lists.ozlabs.org,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linaro-mm-sig@lists.linaro.org, linux-mm@kvack.org,
 iommu@lists.linux-foundation.org, bpf@vger.kernel.org,
 Robin Murphy <robin.murphy@arm.com>, linux-arm-kernel@lists.infradead.org
Subject: [Linaro-mm-sig] [PATCH 20/28] mm: remove the pgprot argument to
	__vmalloc
X-BeenThere: linaro-mm-sig@lists.linaro.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: "Unified memory management interest group."
 <linaro-mm-sig.lists.linaro.org>
List-Unsubscribe: <https://lists.linaro.org/mailman/options/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=unsubscribe>
List-Archive: <http://lists.linaro.org/pipermail/linaro-mm-sig/>
List-Post: <mailto:linaro-mm-sig@lists.linaro.org>
List-Help: <mailto:linaro-mm-sig-request@lists.linaro.org?subject=help>
List-Subscribe: <https://lists.linaro.org/mailman/listinfo/linaro-mm-sig>,
 <mailto:linaro-mm-sig-request@lists.linaro.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linaro-mm-sig-bounces@lists.linaro.org
Sender: "Linaro-mm-sig" <linaro-mm-sig-bounces@lists.linaro.org>
X-Virus-Scanned: ClamAV using ClamSMTP

VGhlIHBncHJvdCBhcmd1bWVudCB0byBfX3ZtYWxsb2MgaXMgYWx3YXlzIFBST1RfS0VSTkVMIG5v
dywgc28gcmVtb3ZlCml0LgoKU2lnbmVkLW9mZi1ieTogQ2hyaXN0b3BoIEhlbGx3aWcgPGhjaEBs
c3QuZGU+Ci0tLQogYXJjaC94ODYvaHlwZXJ2L2h2X2luaXQuYyAgICAgICAgICAgICAgfCAgMyAr
LS0KIGFyY2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmggICAgICAgIHwgIDMgKy0tCiBhcmNo
L3g4Ni9rdm0vc3ZtLmMgICAgICAgICAgICAgICAgICAgICB8ICAzICstLQogZHJpdmVycy9ibG9j
ay9kcmJkL2RyYmRfYml0bWFwLmMgICAgICAgfCAgNCArLS0tCiBkcml2ZXJzL2dwdS9kcm0vZXRu
YXZpdi9ldG5hdml2X2R1bXAuYyB8ICA0ICsrLS0KIGRyaXZlcnMvbGlnaHRudm0vcGJsay1pbml0
LmMgICAgICAgICAgIHwgIDUgKystLS0KIGRyaXZlcnMvbWQvZG0tYnVmaW8uYyAgICAgICAgICAg
ICAgICAgIHwgIDQgKystLQogZHJpdmVycy9tdGQvdWJpL2lvLmMgICAgICAgICAgICAgICAgICAg
fCAgNCArKy0tCiBkcml2ZXJzL3Njc2kvc2RfemJjLmMgICAgICAgICAgICAgICAgICB8ICAzICst
LQogZnMvZ2ZzMi9kaXIuYyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgOSArKysrLS0tLS0K
IGZzL2dmczIvcXVvdGEuYyAgICAgICAgICAgICAgICAgICAgICAgIHwgIDIgKy0KIGZzL25mcy9i
bG9ja2xheW91dC9leHRlbnRfdHJlZS5jICAgICAgIHwgIDIgKy0KIGZzL250ZnMvbWFsbG9jLmgg
ICAgICAgICAgICAgICAgICAgICAgIHwgIDIgKy0KIGZzL3ViaWZzL2RlYnVnLmMgICAgICAgICAg
ICAgICAgICAgICAgIHwgIDIgKy0KIGZzL3ViaWZzL2xwcm9wcy5jICAgICAgICAgICAgICAgICAg
ICAgIHwgIDIgKy0KIGZzL3ViaWZzL2xwdF9jb21taXQuYyAgICAgICAgICAgICAgICAgIHwgIDQg
KystLQogZnMvdWJpZnMvb3JwaGFuLmMgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQogZnMv
eGZzL2ttZW0uYyAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQogaW5jbHVkZS9saW51
eC92bWFsbG9jLmggICAgICAgICAgICAgICAgfCAgMiArLQoga2VybmVsL2JwZi9jb3JlLmMgICAg
ICAgICAgICAgICAgICAgICAgfCAgNiArKystLS0KIGtlcm5lbC9ncm91cHMuYyAgICAgICAgICAg
ICAgICAgICAgICAgIHwgIDIgKy0KIGtlcm5lbC9tb2R1bGUuYyAgICAgICAgICAgICAgICAgICAg
ICAgIHwgIDMgKy0tCiBtbS9ub21tdS5jICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDE1
ICsrKysrKystLS0tLS0tLQogbW0vcGFnZV9hbGxvYy5jICAgICAgICAgICAgICAgICAgICAgICAg
fCAgMiArLQogbW0vcGVyY3B1LmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgMiArLQog
bW0vdm1hbGxvYy5jICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNCArKy0tCiBuZXQvYnJp
ZGdlL25ldGZpbHRlci9lYnRhYmxlcy5jICAgICAgICB8ICA2ICsrLS0tLQogc291bmQvY29yZS9t
ZW1hbGxvYy5jICAgICAgICAgICAgICAgICAgfCAgMiArLQogc291bmQvY29yZS9wY21fbWVtb3J5
LmMgICAgICAgICAgICAgICAgfCAgMiArLQogMjkgZmlsZXMgY2hhbmdlZCwgNDcgaW5zZXJ0aW9u
cygrKSwgNTkgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaHlwZXJ2L2h2X2lu
aXQuYyBiL2FyY2gveDg2L2h5cGVydi9odl9pbml0LmMKaW5kZXggNWE0YjM2M2JhNjdiLi5hM2Q2
ODlkZmM3NDUgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2h5cGVydi9odl9pbml0LmMKKysrIGIvYXJj
aC94ODYvaHlwZXJ2L2h2X2luaXQuYwpAQCAtOTUsOCArOTUsNyBAQCBzdGF0aWMgaW50IGh2X2Nw
dV9pbml0KHVuc2lnbmVkIGludCBjcHUpCiAJICogbm90IGJlIHN0b3BwZWQgaW4gdGhlIGNhc2Ug
b2YgQ1BVIG9mZmxpbmluZyBhbmQgdGhlIFZNIHdpbGwgaGFuZy4KIAkgKi8KIAlpZiAoISpodnAp
IHsKLQkJKmh2cCA9IF9fdm1hbGxvYyhQQUdFX1NJWkUsIEdGUF9LRVJORUwgfCBfX0dGUF9aRVJP
LAotCQkJCSBQQUdFX0tFUk5FTCk7CisJCSpodnAgPSBfX3ZtYWxsb2MoUEFHRV9TSVpFLCBHRlBf
S0VSTkVMIHwgX19HRlBfWkVSTyk7CiAJfQogCiAJaWYgKCpodnApIHsKZGlmZiAtLWdpdCBhL2Fy
Y2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9rdm1f
aG9zdC5oCmluZGV4IDQyYTJkMGQzOTg0YS4uNzFiYzA5YmZmMDFhIDEwMDY0NAotLS0gYS9hcmNo
L3g4Ni9pbmNsdWRlL2FzbS9rdm1faG9zdC5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2
bV9ob3N0LmgKQEAgLTEyODAsOCArMTI4MCw3IEBAIGV4dGVybiBzdHJ1Y3Qga21lbV9jYWNoZSAq
eDg2X2ZwdV9jYWNoZTsKICNkZWZpbmUgX19LVk1fSEFWRV9BUkNIX1ZNX0FMTE9DCiBzdGF0aWMg
aW5saW5lIHN0cnVjdCBrdm0gKmt2bV9hcmNoX2FsbG9jX3ZtKHZvaWQpCiB7Ci0JcmV0dXJuIF9f
dm1hbGxvYyhrdm1feDg2X29wcy52bV9zaXplLAotCQkJIEdGUF9LRVJORUxfQUNDT1VOVCB8IF9f
R0ZQX1pFUk8sIFBBR0VfS0VSTkVMKTsKKwlyZXR1cm4gX192bWFsbG9jKGt2bV94ODZfb3BzLnZt
X3NpemUsIEdGUF9LRVJORUxfQUNDT1VOVCB8IF9fR0ZQX1pFUk8pOwogfQogdm9pZCBrdm1fYXJj
aF9mcmVlX3ZtKHN0cnVjdCBrdm0gKmt2bSk7CiAKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2t2bS9z
dm0uYyBiL2FyY2gveDg2L2t2bS9zdm0uYwppbmRleCA4NTFlOWNjNzk5MzAuLjgzZTgzMjNiYTRm
MiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3ZtL3N2bS5jCisrKyBiL2FyY2gveDg2L2t2bS9zdm0u
YwpAQCAtMTkyNyw4ICsxOTI3LDcgQEAgc3RhdGljIHN0cnVjdCBwYWdlICoqc2V2X3Bpbl9tZW1v
cnkoc3RydWN0IGt2bSAqa3ZtLCB1bnNpZ25lZCBsb25nIHVhZGRyLAogCS8qIEF2b2lkIHVzaW5n
IHZtYWxsb2MgZm9yIHNtYWxsZXIgYnVmZmVycy4gKi8KIAlzaXplID0gbnBhZ2VzICogc2l6ZW9m
KHN0cnVjdCBwYWdlICopOwogCWlmIChzaXplID4gUEFHRV9TSVpFKQotCQlwYWdlcyA9IF9fdm1h
bGxvYyhzaXplLCBHRlBfS0VSTkVMX0FDQ09VTlQgfCBfX0dGUF9aRVJPLAotCQkJCSAgUEFHRV9L
RVJORUwpOworCQlwYWdlcyA9IF9fdm1hbGxvYyhzaXplLCBHRlBfS0VSTkVMX0FDQ09VTlQgfCBf
X0dGUF9aRVJPKTsKIAllbHNlCiAJCXBhZ2VzID0ga21hbGxvYyhzaXplLCBHRlBfS0VSTkVMX0FD
Q09VTlQpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2Jsb2NrL2RyYmQvZHJiZF9iaXRtYXAuYyBi
L2RyaXZlcnMvYmxvY2svZHJiZC9kcmJkX2JpdG1hcC5jCmluZGV4IDE1ZTk5Njk3MjM0YS4uZGY1
M2RjYTVkMDJjIDEwMDY0NAotLS0gYS9kcml2ZXJzL2Jsb2NrL2RyYmQvZHJiZF9iaXRtYXAuYwor
KysgYi9kcml2ZXJzL2Jsb2NrL2RyYmQvZHJiZF9iaXRtYXAuYwpAQCAtMzk2LDkgKzM5Niw3IEBA
IHN0YXRpYyBzdHJ1Y3QgcGFnZSAqKmJtX3JlYWxsb2NfcGFnZXMoc3RydWN0IGRyYmRfYml0bWFw
ICpiLCB1bnNpZ25lZCBsb25nIHdhbnQpCiAJYnl0ZXMgPSBzaXplb2Yoc3RydWN0IHBhZ2UgKikq
d2FudDsKIAluZXdfcGFnZXMgPSBremFsbG9jKGJ5dGVzLCBHRlBfTk9JTyB8IF9fR0ZQX05PV0FS
Tik7CiAJaWYgKCFuZXdfcGFnZXMpIHsKLQkJbmV3X3BhZ2VzID0gX192bWFsbG9jKGJ5dGVzLAot
CQkJCUdGUF9OT0lPIHwgX19HRlBfWkVSTywKLQkJCQlQQUdFX0tFUk5FTCk7CisJCW5ld19wYWdl
cyA9IF9fdm1hbGxvYyhieXRlcywgR0ZQX05PSU8gfCBfX0dGUF9aRVJPKTsKIAkJaWYgKCFuZXdf
cGFnZXMpCiAJCQlyZXR1cm4gTlVMTDsKIAl9CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
ZXRuYXZpdi9ldG5hdml2X2R1bXAuYyBiL2RyaXZlcnMvZ3B1L2RybS9ldG5hdml2L2V0bmF2aXZf
ZHVtcC5jCmluZGV4IDY0OGNmMDIwNzMwOS4uNzA2YWYwMzA0Y2E0IDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vZXRuYXZpdi9ldG5hdml2X2R1bXAuYworKysgYi9kcml2ZXJzL2dwdS9kcm0v
ZXRuYXZpdi9ldG5hdml2X2R1bXAuYwpAQCAtMTU0LDggKzE1NCw4IEBAIHZvaWQgZXRuYXZpdl9j
b3JlX2R1bXAoc3RydWN0IGV0bmF2aXZfZ2VtX3N1Ym1pdCAqc3VibWl0KQogCWZpbGVfc2l6ZSAr
PSBzaXplb2YoKml0ZXIuaGRyKSAqIG5fb2JqOwogCiAJLyogQWxsb2NhdGUgdGhlIGZpbGUgaW4g
dm1hbGxvYyBtZW1vcnksIGl0J3MgbGlrZWx5IHRvIGJlIGJpZyAqLwotCWl0ZXIuc3RhcnQgPSBf
X3ZtYWxsb2MoZmlsZV9zaXplLCBHRlBfS0VSTkVMIHwgX19HRlBfTk9XQVJOIHwgX19HRlBfTk9S
RVRSWSwKLQkJCSAgICAgICBQQUdFX0tFUk5FTCk7CisJaXRlci5zdGFydCA9IF9fdm1hbGxvYyhm
aWxlX3NpemUsIEdGUF9LRVJORUwgfCBfX0dGUF9OT1dBUk4gfAorCQkJX19HRlBfTk9SRVRSWSk7
CiAJaWYgKCFpdGVyLnN0YXJ0KSB7CiAJCW11dGV4X3VubG9jaygmZ3B1LT5tbXVfY29udGV4dC0+
bG9jayk7CiAJCWRldl93YXJuKGdwdS0+ZGV2LCAiZmFpbGVkIHRvIGFsbG9jYXRlIGRldmNvcmVk
dW1wIGZpbGVcbiIpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9saWdodG52bS9wYmxrLWluaXQuYyBi
L2RyaXZlcnMvbGlnaHRudm0vcGJsay1pbml0LmMKaW5kZXggOWE5NjdhMmU4M2RkLi42ZTY3N2Zm
NjJjYzkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbGlnaHRudm0vcGJsay1pbml0LmMKKysrIGIvZHJp
dmVycy9saWdodG52bS9wYmxrLWluaXQuYwpAQCAtMTQ1LDkgKzE0NSw4IEBAIHN0YXRpYyBpbnQg
cGJsa19sMnBfaW5pdChzdHJ1Y3QgcGJsayAqcGJsaywgYm9vbCBmYWN0b3J5X2luaXQpCiAJaW50
IHJldCA9IDA7CiAKIAltYXBfc2l6ZSA9IHBibGtfdHJhbnNfbWFwX3NpemUocGJsayk7Ci0JcGJs
ay0+dHJhbnNfbWFwID0gX192bWFsbG9jKG1hcF9zaXplLCBHRlBfS0VSTkVMIHwgX19HRlBfTk9X
QVJOCi0JCQkJCXwgX19HRlBfUkVUUllfTUFZRkFJTCB8IF9fR0ZQX0hJR0hNRU0sCi0JCQkJCVBB
R0VfS0VSTkVMKTsKKwlwYmxrLT50cmFuc19tYXAgPSBfX3ZtYWxsb2MobWFwX3NpemUsIEdGUF9L
RVJORUwgfCBfX0dGUF9OT1dBUk4gfAorCQkJCSAgICBfX0dGUF9SRVRSWV9NQVlGQUlMIHwgX19H
RlBfSElHSE1FTSk7CiAJaWYgKCFwYmxrLT50cmFuc19tYXApIHsKIAkJcGJsa19lcnIocGJsaywg
ImZhaWxlZCB0byBhbGxvY2F0ZSBMMlAgKG5lZWQgJXp1IG9mIG1lbW9yeSlcbiIsCiAJCQkJbWFw
X3NpemUpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9tZC9kbS1idWZpby5jIGIvZHJpdmVycy9tZC9k
bS1idWZpby5jCmluZGV4IDJkNTE5YzIyMzU2Mi4uZDE3ODZjZmQ3ZjIyIDEwMDY0NAotLS0gYS9k
cml2ZXJzL21kL2RtLWJ1ZmlvLmMKKysrIGIvZHJpdmVycy9tZC9kbS1idWZpby5jCkBAIC00MDAs
MTMgKzQwMCwxMyBAQCBzdGF0aWMgdm9pZCAqYWxsb2NfYnVmZmVyX2RhdGEoc3RydWN0IGRtX2J1
ZmlvX2NsaWVudCAqYywgZ2ZwX3QgZ2ZwX21hc2ssCiAJICovCiAJaWYgKGdmcF9tYXNrICYgX19H
RlBfTk9SRVRSWSkgewogCQl1bnNpZ25lZCBub2lvX2ZsYWcgPSBtZW1hbGxvY19ub2lvX3NhdmUo
KTsKLQkJdm9pZCAqcHRyID0gX192bWFsbG9jKGMtPmJsb2NrX3NpemUsIGdmcF9tYXNrLCBQQUdF
X0tFUk5FTCk7CisJCXZvaWQgKnB0ciA9IF9fdm1hbGxvYyhjLT5ibG9ja19zaXplLCBnZnBfbWFz
ayk7CiAKIAkJbWVtYWxsb2Nfbm9pb19yZXN0b3JlKG5vaW9fZmxhZyk7CiAJCXJldHVybiBwdHI7
CiAJfQogCi0JcmV0dXJuIF9fdm1hbGxvYyhjLT5ibG9ja19zaXplLCBnZnBfbWFzaywgUEFHRV9L
RVJORUwpOworCXJldHVybiBfX3ZtYWxsb2MoYy0+YmxvY2tfc2l6ZSwgZ2ZwX21hc2spOwogfQog
CiAvKgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9tdGQvdWJpL2lvLmMgYi9kcml2ZXJzL210ZC91Ymkv
aW8uYwppbmRleCBiNTdiODRmYjk3ZDAuLjE0ZDg5MGIwMGQyYyAxMDA2NDQKLS0tIGEvZHJpdmVy
cy9tdGQvdWJpL2lvLmMKKysrIGIvZHJpdmVycy9tdGQvdWJpL2lvLmMKQEAgLTEyOTcsNyArMTI5
Nyw3IEBAIHN0YXRpYyBpbnQgc2VsZl9jaGVja193cml0ZShzdHJ1Y3QgdWJpX2RldmljZSAqdWJp
LCBjb25zdCB2b2lkICpidWYsIGludCBwbnVtLAogCWlmICghdWJpX2RiZ19jaGtfaW8odWJpKSkK
IAkJcmV0dXJuIDA7CiAKLQlidWYxID0gX192bWFsbG9jKGxlbiwgR0ZQX05PRlMsIFBBR0VfS0VS
TkVMKTsKKwlidWYxID0gX192bWFsbG9jKGxlbiwgR0ZQX05PRlMpOwogCWlmICghYnVmMSkgewog
CQl1YmlfZXJyKHViaSwgImNhbm5vdCBhbGxvY2F0ZSBtZW1vcnkgdG8gY2hlY2sgd3JpdGVzIik7
CiAJCXJldHVybiAwOwpAQCAtMTM2MSw3ICsxMzYxLDcgQEAgaW50IHViaV9zZWxmX2NoZWNrX2Fs
bF9mZihzdHJ1Y3QgdWJpX2RldmljZSAqdWJpLCBpbnQgcG51bSwgaW50IG9mZnNldCwgaW50IGxl
bikKIAlpZiAoIXViaV9kYmdfY2hrX2lvKHViaSkpCiAJCXJldHVybiAwOwogCi0JYnVmID0gX192
bWFsbG9jKGxlbiwgR0ZQX05PRlMsIFBBR0VfS0VSTkVMKTsKKwlidWYgPSBfX3ZtYWxsb2MobGVu
LCBHRlBfTk9GUyk7CiAJaWYgKCFidWYpIHsKIAkJdWJpX2Vycih1YmksICJjYW5ub3QgYWxsb2Nh
dGUgbWVtb3J5IHRvIGNoZWNrIGZvciAweEZGcyIpOwogCQlyZXR1cm4gMDsKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvc2NzaS9zZF96YmMuYyBiL2RyaXZlcnMvc2NzaS9zZF96YmMuYwppbmRleCBmNDVj
MjJiMDk3MjYuLjhiZTI3NDI2YWE2NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9zY3NpL3NkX3piYy5j
CisrKyBiL2RyaXZlcnMvc2NzaS9zZF96YmMuYwpAQCAtMTM2LDggKzEzNiw3IEBAIHN0YXRpYyB2
b2lkICpzZF96YmNfYWxsb2NfcmVwb3J0X2J1ZmZlcihzdHJ1Y3Qgc2NzaV9kaXNrICpzZGtwLAog
CiAJd2hpbGUgKGJ1ZnNpemUgPj0gU0VDVE9SX1NJWkUpIHsKIAkJYnVmID0gX192bWFsbG9jKGJ1
ZnNpemUsCi0JCQkJR0ZQX0tFUk5FTCB8IF9fR0ZQX1pFUk8gfCBfX0dGUF9OT1JFVFJZLAotCQkJ
CVBBR0VfS0VSTkVMKTsKKwkJCQlHRlBfS0VSTkVMIHwgX19HRlBfWkVSTyB8IF9fR0ZQX05PUkVU
UlkpOwogCQlpZiAoYnVmKSB7CiAJCQkqYnVmbGVuID0gYnVmc2l6ZTsKIAkJCXJldHVybiBidWY7
CmRpZmYgLS1naXQgYS9mcy9nZnMyL2Rpci5jIGIvZnMvZ2ZzMi9kaXIuYwppbmRleCBjM2Y3NzMy
NDE1YmUuLmMwZjI4NzVjOTQ2YyAxMDA2NDQKLS0tIGEvZnMvZ2ZzMi9kaXIuYworKysgYi9mcy9n
ZnMyL2Rpci5jCkBAIC0zNTQsNyArMzU0LDcgQEAgc3RhdGljIF9fYmU2NCAqZ2ZzMl9kaXJfZ2V0
X2hhc2hfdGFibGUoc3RydWN0IGdmczJfaW5vZGUgKmlwKQogCiAJaGMgPSBrbWFsbG9jKGhzaXpl
LCBHRlBfTk9GUyB8IF9fR0ZQX05PV0FSTik7CiAJaWYgKGhjID09IE5VTEwpCi0JCWhjID0gX192
bWFsbG9jKGhzaXplLCBHRlBfTk9GUywgUEFHRV9LRVJORUwpOworCQloYyA9IF9fdm1hbGxvYyho
c2l6ZSwgR0ZQX05PRlMpOwogCiAJaWYgKGhjID09IE5VTEwpCiAJCXJldHVybiBFUlJfUFRSKC1F
Tk9NRU0pOwpAQCAtMTE2Niw3ICsxMTY2LDcgQEAgc3RhdGljIGludCBkaXJfZG91YmxlX2V4aGFz
aChzdHJ1Y3QgZ2ZzMl9pbm9kZSAqZGlwKQogCiAJaGMyID0ga21hbGxvY19hcnJheShoc2l6ZV9i
eXRlcywgMiwgR0ZQX05PRlMgfCBfX0dGUF9OT1dBUk4pOwogCWlmIChoYzIgPT0gTlVMTCkKLQkJ
aGMyID0gX192bWFsbG9jKGhzaXplX2J5dGVzICogMiwgR0ZQX05PRlMsIFBBR0VfS0VSTkVMKTsK
KwkJaGMyID0gX192bWFsbG9jKGhzaXplX2J5dGVzICogMiwgR0ZQX05PRlMpOwogCiAJaWYgKCFo
YzIpCiAJCXJldHVybiAtRU5PTUVNOwpAQCAtMTMyNyw3ICsxMzI3LDcgQEAgc3RhdGljIHZvaWQg
KmdmczJfYWxsb2Nfc29ydF9idWZmZXIodW5zaWduZWQgc2l6ZSkKIAlpZiAoc2l6ZSA8IEtNQUxM
T0NfTUFYX1NJWkUpCiAJCXB0ciA9IGttYWxsb2Moc2l6ZSwgR0ZQX05PRlMgfCBfX0dGUF9OT1dB
Uk4pOwogCWlmICghcHRyKQotCQlwdHIgPSBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX05PRlMsIFBBR0Vf
S0VSTkVMKTsKKwkJcHRyID0gX192bWFsbG9jKHNpemUsIEdGUF9OT0ZTKTsKIAlyZXR1cm4gcHRy
OwogfQogCkBAIC0xOTg3LDggKzE5ODcsNyBAQCBzdGF0aWMgaW50IGxlYWZfZGVhbGxvYyhzdHJ1
Y3QgZ2ZzMl9pbm9kZSAqZGlwLCB1MzIgaW5kZXgsIHUzMiBsZW4sCiAKIAlodCA9IGt6YWxsb2Mo
c2l6ZSwgR0ZQX05PRlMgfCBfX0dGUF9OT1dBUk4pOwogCWlmIChodCA9PSBOVUxMKQotCQlodCA9
IF9fdm1hbGxvYyhzaXplLCBHRlBfTk9GUyB8IF9fR0ZQX05PV0FSTiB8IF9fR0ZQX1pFUk8sCi0J
CQkgICAgICAgUEFHRV9LRVJORUwpOworCQlodCA9IF9fdm1hbGxvYyhzaXplLCBHRlBfTk9GUyB8
IF9fR0ZQX05PV0FSTiB8IF9fR0ZQX1pFUk8pOwogCWlmICghaHQpCiAJCXJldHVybiAtRU5PTUVN
OwogCmRpZmYgLS1naXQgYS9mcy9nZnMyL3F1b3RhLmMgYi9mcy9nZnMyL3F1b3RhLmMKaW5kZXgg
Y2MwYzRiNTgwMGJlLi5iODRhYzU4NDNlYzQgMTAwNjQ0Ci0tLSBhL2ZzL2dmczIvcXVvdGEuYwor
KysgYi9mcy9nZnMyL3F1b3RhLmMKQEAgLTEzNjgsNyArMTM2OCw3IEBAIGludCBnZnMyX3F1b3Rh
X2luaXQoc3RydWN0IGdmczJfc2JkICpzZHApCiAJc2RwLT5zZF9xdW90YV9iaXRtYXAgPSBremFs
bG9jKGJtX3NpemUsIEdGUF9OT0ZTIHwgX19HRlBfTk9XQVJOKTsKIAlpZiAoc2RwLT5zZF9xdW90
YV9iaXRtYXAgPT0gTlVMTCkKIAkJc2RwLT5zZF9xdW90YV9iaXRtYXAgPSBfX3ZtYWxsb2MoYm1f
c2l6ZSwgR0ZQX05PRlMgfAotCQkJCQkJIF9fR0ZQX1pFUk8sIFBBR0VfS0VSTkVMKTsKKwkJCQkJ
CSBfX0dGUF9aRVJPKTsKIAlpZiAoIXNkcC0+c2RfcXVvdGFfYml0bWFwKQogCQlyZXR1cm4gZXJy
b3I7CiAKZGlmZiAtLWdpdCBhL2ZzL25mcy9ibG9ja2xheW91dC9leHRlbnRfdHJlZS5jIGIvZnMv
bmZzL2Jsb2NrbGF5b3V0L2V4dGVudF90cmVlLmMKaW5kZXggN2E1N2ZmMjUyOGFmLi44ZjdjZmY3
YTQyOTMgMTAwNjQ0Ci0tLSBhL2ZzL25mcy9ibG9ja2xheW91dC9leHRlbnRfdHJlZS5jCisrKyBi
L2ZzL25mcy9ibG9ja2xheW91dC9leHRlbnRfdHJlZS5jCkBAIC01ODIsNyArNTgyLDcgQEAgZXh0
X3RyZWVfcHJlcGFyZV9jb21taXQoc3RydWN0IG5mczRfbGF5b3V0Y29tbWl0X2FyZ3MgKmFyZykK
IAkJaWYgKCFhcmctPmxheW91dHVwZGF0ZV9wYWdlcykKIAkJCXJldHVybiAtRU5PTUVNOwogCi0J
CXN0YXJ0X3AgPSBfX3ZtYWxsb2MoYnVmZmVyX3NpemUsIEdGUF9OT0ZTLCBQQUdFX0tFUk5FTCk7
CisJCXN0YXJ0X3AgPSBfX3ZtYWxsb2MoYnVmZmVyX3NpemUsIEdGUF9OT0ZTKTsKIAkJaWYgKCFz
dGFydF9wKSB7CiAJCQlrZnJlZShhcmctPmxheW91dHVwZGF0ZV9wYWdlcyk7CiAJCQlyZXR1cm4g
LUVOT01FTTsKZGlmZiAtLWdpdCBhL2ZzL250ZnMvbWFsbG9jLmggYi9mcy9udGZzL21hbGxvYy5o
CmluZGV4IDg0MmIwYmZjM2FjOS4uNzA2ODQyNTczNWYxIDEwMDY0NAotLS0gYS9mcy9udGZzL21h
bGxvYy5oCisrKyBiL2ZzL250ZnMvbWFsbG9jLmgKQEAgLTM0LDcgKzM0LDcgQEAgc3RhdGljIGlu
bGluZSB2b2lkICpfX250ZnNfbWFsbG9jKHVuc2lnbmVkIGxvbmcgc2l6ZSwgZ2ZwX3QgZ2ZwX21h
c2spCiAJCS8qIHJldHVybiAodm9pZCAqKV9fZ2V0X2ZyZWVfcGFnZShnZnBfbWFzayk7ICovCiAJ
fQogCWlmIChsaWtlbHkoKHNpemUgPj4gUEFHRV9TSElGVCkgPCB0b3RhbHJhbV9wYWdlcygpKSkK
LQkJcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBnZnBfbWFzaywgUEFHRV9LRVJORUwpOworCQlyZXR1
cm4gX192bWFsbG9jKHNpemUsIGdmcF9tYXNrKTsKIAlyZXR1cm4gTlVMTDsKIH0KIApkaWZmIC0t
Z2l0IGEvZnMvdWJpZnMvZGVidWcuYyBiL2ZzL3ViaWZzL2RlYnVnLmMKaW5kZXggMGY1YTQ4MGZl
MjY0Li4zMTI4OGQ4ZmEyY2UgMTAwNjQ0Ci0tLSBhL2ZzL3ViaWZzL2RlYnVnLmMKKysrIGIvZnMv
dWJpZnMvZGVidWcuYwpAQCAtODE1LDcgKzgxNSw3IEBAIHZvaWQgdWJpZnNfZHVtcF9sZWIoY29u
c3Qgc3RydWN0IHViaWZzX2luZm8gKmMsIGludCBsbnVtKQogCiAJcHJfZXJyKCIocGlkICVkKSBz
dGFydCBkdW1waW5nIExFQiAlZFxuIiwgY3VycmVudC0+cGlkLCBsbnVtKTsKIAotCWJ1ZiA9IF9f
dm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMsIFBBR0VfS0VSTkVMKTsKKwlidWYgPSBfX3Zt
YWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTKTsKIAlpZiAoIWJ1ZikgewogCQl1Ymlmc19lcnIo
YywgImNhbm5vdCBhbGxvY2F0ZSBtZW1vcnkgZm9yIGR1bXBpbmcgTEVCICVkIiwgbG51bSk7CiAJ
CXJldHVybjsKZGlmZiAtLWdpdCBhL2ZzL3ViaWZzL2xwcm9wcy5jIGIvZnMvdWJpZnMvbHByb3Bz
LmMKaW5kZXggMjk4MjZjNTE4ODNhLi4yMmJmZGExNThmN2YgMTAwNjQ0Ci0tLSBhL2ZzL3ViaWZz
L2xwcm9wcy5jCisrKyBiL2ZzL3ViaWZzL2xwcm9wcy5jCkBAIC0xMDk1LDcgKzEwOTUsNyBAQCBz
dGF0aWMgaW50IHNjYW5fY2hlY2tfY2Ioc3RydWN0IHViaWZzX2luZm8gKmMsCiAJCXJldHVybiBM
UFRfU0NBTl9DT05USU5VRTsKIAl9CiAKLQlidWYgPSBfX3ZtYWxsb2MoYy0+bGViX3NpemUsIEdG
UF9OT0ZTLCBQQUdFX0tFUk5FTCk7CisJYnVmID0gX192bWFsbG9jKGMtPmxlYl9zaXplLCBHRlBf
Tk9GUyk7CiAJaWYgKCFidWYpCiAJCXJldHVybiAtRU5PTUVNOwogCmRpZmYgLS1naXQgYS9mcy91
Ymlmcy9scHRfY29tbWl0LmMgYi9mcy91Ymlmcy9scHRfY29tbWl0LmMKaW5kZXggZmY1ZTA0MTFj
ZjJkLi5kNzZhMTllNDYwY2QgMTAwNjQ0Ci0tLSBhL2ZzL3ViaWZzL2xwdF9jb21taXQuYworKysg
Yi9mcy91Ymlmcy9scHRfY29tbWl0LmMKQEAgLTE1OTYsNyArMTU5Niw3IEBAIHN0YXRpYyBpbnQg
ZGJnX2NoZWNrX2x0YWJfbG51bShzdHJ1Y3QgdWJpZnNfaW5mbyAqYywgaW50IGxudW0pCiAJaWYg
KCFkYmdfaXNfY2hrX2xwcm9wcyhjKSkKIAkJcmV0dXJuIDA7CiAKLQlidWYgPSBwID0gX192bWFs
bG9jKGMtPmxlYl9zaXplLCBHRlBfTk9GUywgUEFHRV9LRVJORUwpOworCWJ1ZiA9IHAgPSBfX3Zt
YWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTKTsKIAlpZiAoIWJ1ZikgewogCQl1Ymlmc19lcnIo
YywgImNhbm5vdCBhbGxvY2F0ZSBtZW1vcnkgZm9yIGx0YWIgY2hlY2tpbmciKTsKIAkJcmV0dXJu
IDA7CkBAIC0xODQ1LDcgKzE4NDUsNyBAQCBzdGF0aWMgdm9pZCBkdW1wX2xwdF9sZWIoY29uc3Qg
c3RydWN0IHViaWZzX2luZm8gKmMsIGludCBsbnVtKQogCXZvaWQgKmJ1ZiwgKnA7CiAKIAlwcl9l
cnIoIihwaWQgJWQpIHN0YXJ0IGR1bXBpbmcgTEVCICVkXG4iLCBjdXJyZW50LT5waWQsIGxudW0p
OwotCWJ1ZiA9IHAgPSBfX3ZtYWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTLCBQQUdFX0tFUk5F
TCk7CisJYnVmID0gcCA9IF9fdm1hbGxvYyhjLT5sZWJfc2l6ZSwgR0ZQX05PRlMpOwogCWlmICgh
YnVmKSB7CiAJCXViaWZzX2VycihjLCAiY2Fubm90IGFsbG9jYXRlIG1lbW9yeSB0byBkdW1wIExQ
VCIpOwogCQlyZXR1cm47CmRpZmYgLS1naXQgYS9mcy91Ymlmcy9vcnBoYW4uYyBiL2ZzL3ViaWZz
L29ycGhhbi5jCmluZGV4IDI4M2Y5ZWI0ODQxMC4uMmMyOTQwODVmZmVkIDEwMDY0NAotLS0gYS9m
cy91Ymlmcy9vcnBoYW4uYworKysgYi9mcy91Ymlmcy9vcnBoYW4uYwpAQCAtOTc3LDcgKzk3Nyw3
IEBAIHN0YXRpYyBpbnQgZGJnX3NjYW5fb3JwaGFucyhzdHJ1Y3QgdWJpZnNfaW5mbyAqYywgc3Ry
dWN0IGNoZWNrX2luZm8gKmNpKQogCWlmIChjLT5ub19vcnBocykKIAkJcmV0dXJuIDA7CiAKLQli
dWYgPSBfX3ZtYWxsb2MoYy0+bGViX3NpemUsIEdGUF9OT0ZTLCBQQUdFX0tFUk5FTCk7CisJYnVm
ID0gX192bWFsbG9jKGMtPmxlYl9zaXplLCBHRlBfTk9GUyk7CiAJaWYgKCFidWYpIHsKIAkJdWJp
ZnNfZXJyKGMsICJjYW5ub3QgYWxsb2NhdGUgbWVtb3J5IHRvIGNoZWNrIG9ycGhhbnMiKTsKIAkJ
cmV0dXJuIDA7CmRpZmYgLS1naXQgYS9mcy94ZnMva21lbS5jIGIvZnMveGZzL2ttZW0uYwppbmRl
eCAxZGE5NDIzN2E4Y2YuLmYxMzY2NDc1YzM4OSAxMDA2NDQKLS0tIGEvZnMveGZzL2ttZW0uYwor
KysgYi9mcy94ZnMva21lbS5jCkBAIC00OCw3ICs0OCw3IEBAIF9fa21lbV92bWFsbG9jKHNpemVf
dCBzaXplLCB4ZnNfa21fZmxhZ3NfdCBmbGFncykKIAlpZiAoZmxhZ3MgJiBLTV9OT0ZTKQogCQlu
b2ZzX2ZsYWcgPSBtZW1hbGxvY19ub2ZzX3NhdmUoKTsKIAotCXB0ciA9IF9fdm1hbGxvYyhzaXpl
LCBsZmxhZ3MsIFBBR0VfS0VSTkVMKTsKKwlwdHIgPSBfX3ZtYWxsb2Moc2l6ZSwgbGZsYWdzKTsK
IAogCWlmIChmbGFncyAmIEtNX05PRlMpCiAJCW1lbWFsbG9jX25vZnNfcmVzdG9yZShub2ZzX2Zs
YWcpOwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC92bWFsbG9jLmggYi9pbmNsdWRlL2xpbnV4
L3ZtYWxsb2MuaAppbmRleCA5MjczYjFhOTFjYTUuLmMxYjlkNmVjYTA1ZiAxMDA2NDQKLS0tIGEv
aW5jbHVkZS9saW51eC92bWFsbG9jLmgKKysrIGIvaW5jbHVkZS9saW51eC92bWFsbG9jLmgKQEAg
LTExMCw3ICsxMTAsNyBAQCBleHRlcm4gdm9pZCAqdm1hbGxvY191c2VyX25vZGVfZmxhZ3ModW5z
aWduZWQgbG9uZyBzaXplLCBpbnQgbm9kZSwgZ2ZwX3QgZmxhZ3MpOwogZXh0ZXJuIHZvaWQgKnZt
YWxsb2NfZXhlYyh1bnNpZ25lZCBsb25nIHNpemUpOwogZXh0ZXJuIHZvaWQgKnZtYWxsb2NfMzIo
dW5zaWduZWQgbG9uZyBzaXplKTsKIGV4dGVybiB2b2lkICp2bWFsbG9jXzMyX3VzZXIodW5zaWdu
ZWQgbG9uZyBzaXplKTsKLWV4dGVybiB2b2lkICpfX3ZtYWxsb2ModW5zaWduZWQgbG9uZyBzaXpl
LCBnZnBfdCBnZnBfbWFzaywgcGdwcm90X3QgcHJvdCk7CitleHRlcm4gdm9pZCAqX192bWFsbG9j
KHVuc2lnbmVkIGxvbmcgc2l6ZSwgZ2ZwX3QgZ2ZwX21hc2spOwogZXh0ZXJuIHZvaWQgKl9fdm1h
bGxvY19ub2RlX3JhbmdlKHVuc2lnbmVkIGxvbmcgc2l6ZSwgdW5zaWduZWQgbG9uZyBhbGlnbiwK
IAkJCXVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBnZnBfdCBnZnBfbWFz
aywKIAkJCXBncHJvdF90IHByb3QsIHVuc2lnbmVkIGxvbmcgdm1fZmxhZ3MsIGludCBub2RlLApk
aWZmIC0tZ2l0IGEva2VybmVsL2JwZi9jb3JlLmMgYi9rZXJuZWwvYnBmL2NvcmUuYwppbmRleCA5
MTZmNTEzMmE5ODQuLmM3MTJkZTU2MDM1NyAxMDA2NDQKLS0tIGEva2VybmVsL2JwZi9jb3JlLmMK
KysrIGIva2VybmVsL2JwZi9jb3JlLmMKQEAgLTgyLDcgKzgyLDcgQEAgc3RydWN0IGJwZl9wcm9n
ICpicGZfcHJvZ19hbGxvY19ub19zdGF0cyh1bnNpZ25lZCBpbnQgc2l6ZSwgZ2ZwX3QgZ2ZwX2V4
dHJhX2ZsYWcKIAlzdHJ1Y3QgYnBmX3Byb2cgKmZwOwogCiAJc2l6ZSA9IHJvdW5kX3VwKHNpemUs
IFBBR0VfU0laRSk7Ci0JZnAgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwX2ZsYWdzLCBQQUdFX0tFUk5F
TCk7CisJZnAgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwX2ZsYWdzKTsKIAlpZiAoZnAgPT0gTlVMTCkK
IAkJcmV0dXJuIE5VTEw7CiAKQEAgLTIzMiw3ICsyMzIsNyBAQCBzdHJ1Y3QgYnBmX3Byb2cgKmJw
Zl9wcm9nX3JlYWxsb2Moc3RydWN0IGJwZl9wcm9nICpmcF9vbGQsIHVuc2lnbmVkIGludCBzaXpl
LAogCWlmIChyZXQpCiAJCXJldHVybiBOVUxMOwogCi0JZnAgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2Zw
X2ZsYWdzLCBQQUdFX0tFUk5FTCk7CisJZnAgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwX2ZsYWdzKTsK
IAlpZiAoZnAgPT0gTlVMTCkgewogCQlfX2JwZl9wcm9nX3VuY2hhcmdlKGZwX29sZC0+YXV4LT51
c2VyLCBkZWx0YSk7CiAJfSBlbHNlIHsKQEAgLTEwODksNyArMTA4OSw3IEBAIHN0YXRpYyBzdHJ1
Y3QgYnBmX3Byb2cgKmJwZl9wcm9nX2Nsb25lX2NyZWF0ZShzdHJ1Y3QgYnBmX3Byb2cgKmZwX290
aGVyLAogCWdmcF90IGdmcF9mbGFncyA9IEdGUF9LRVJORUwgfCBfX0dGUF9aRVJPIHwgZ2ZwX2V4
dHJhX2ZsYWdzOwogCXN0cnVjdCBicGZfcHJvZyAqZnA7CiAKLQlmcCA9IF9fdm1hbGxvYyhmcF9v
dGhlci0+cGFnZXMgKiBQQUdFX1NJWkUsIGdmcF9mbGFncywgUEFHRV9LRVJORUwpOworCWZwID0g
X192bWFsbG9jKGZwX290aGVyLT5wYWdlcyAqIFBBR0VfU0laRSwgZ2ZwX2ZsYWdzKTsKIAlpZiAo
ZnAgIT0gTlVMTCkgewogCQkvKiBhdXgtPnByb2cgc3RpbGwgcG9pbnRzIHRvIHRoZSBmcF9vdGhl
ciBvbmUsIHNvCiAJCSAqIHdoZW4gcHJvbW90aW5nIHRoZSBjbG9uZSB0byB0aGUgcmVhbCBwcm9n
cmFtLApkaWZmIC0tZ2l0IGEva2VybmVsL2dyb3Vwcy5jIGIva2VybmVsL2dyb3Vwcy5jCmluZGV4
IGRhYWUyZjJkYzZkNC4uNmVlNjY5MWY2ODM5IDEwMDY0NAotLS0gYS9rZXJuZWwvZ3JvdXBzLmMK
KysrIGIva2VybmVsL2dyb3Vwcy5jCkBAIC0yMCw3ICsyMCw3IEBAIHN0cnVjdCBncm91cF9pbmZv
ICpncm91cHNfYWxsb2MoaW50IGdpZHNldHNpemUpCiAJbGVuID0gc2l6ZW9mKHN0cnVjdCBncm91
cF9pbmZvKSArIHNpemVvZihrZ2lkX3QpICogZ2lkc2V0c2l6ZTsKIAlnaSA9IGttYWxsb2MobGVu
LCBHRlBfS0VSTkVMX0FDQ09VTlR8X19HRlBfTk9XQVJOfF9fR0ZQX05PUkVUUlkpOwogCWlmICgh
Z2kpCi0JCWdpID0gX192bWFsbG9jKGxlbiwgR0ZQX0tFUk5FTF9BQ0NPVU5ULCBQQUdFX0tFUk5F
TCk7CisJCWdpID0gX192bWFsbG9jKGxlbiwgR0ZQX0tFUk5FTF9BQ0NPVU5UKTsKIAlpZiAoIWdp
KQogCQlyZXR1cm4gTlVMTDsKIApkaWZmIC0tZ2l0IGEva2VybmVsL21vZHVsZS5jIGIva2VybmVs
L21vZHVsZS5jCmluZGV4IDM0NDdmM2I3NDg3MC4uYzYwN2ZlZDRlNjE3IDEwMDY0NAotLS0gYS9r
ZXJuZWwvbW9kdWxlLmMKKysrIGIva2VybmVsL21vZHVsZS5jCkBAIC0yOTQ2LDggKzI5NDYsNyBA
QCBzdGF0aWMgaW50IGNvcHlfbW9kdWxlX2Zyb21fdXNlcihjb25zdCB2b2lkIF9fdXNlciAqdW1v
ZCwgdW5zaWduZWQgbG9uZyBsZW4sCiAJCXJldHVybiBlcnI7CiAKIAkvKiBTdWNrIGluIGVudGly
ZSBmaWxlOiB3ZSdsbCB3YW50IG1vc3Qgb2YgaXQuICovCi0JaW5mby0+aGRyID0gX192bWFsbG9j
KGluZm8tPmxlbiwKLQkJCUdGUF9LRVJORUwgfCBfX0dGUF9OT1dBUk4sIFBBR0VfS0VSTkVMKTsK
KwlpbmZvLT5oZHIgPSBfX3ZtYWxsb2MoaW5mby0+bGVuLCBHRlBfS0VSTkVMIHwgX19HRlBfTk9X
QVJOKTsKIAlpZiAoIWluZm8tPmhkcikKIAkJcmV0dXJuIC1FTk9NRU07CiAKZGlmZiAtLWdpdCBh
L21tL25vbW11LmMgYi9tbS9ub21tdS5jCmluZGV4IDRmMDdiN2VmMDI5Ny4uMmRmNTQ5YWRiMjJi
IDEwMDY0NAotLS0gYS9tbS9ub21tdS5jCisrKyBiL21tL25vbW11LmMKQEAgLTE0MCw3ICsxNDAs
NyBAQCB2b2lkIHZmcmVlKGNvbnN0IHZvaWQgKmFkZHIpCiB9CiBFWFBPUlRfU1lNQk9MKHZmcmVl
KTsKIAotdm9pZCAqX192bWFsbG9jKHVuc2lnbmVkIGxvbmcgc2l6ZSwgZ2ZwX3QgZ2ZwX21hc2ss
IHBncHJvdF90IHByb3QpCit2b2lkICpfX3ZtYWxsb2ModW5zaWduZWQgbG9uZyBzaXplLCBnZnBf
dCBnZnBfbWFzaykKIHsKIAkvKgogCSAqICBZb3UgY2FuJ3Qgc3BlY2lmeSBfX0dGUF9ISUdITUVN
IHdpdGgga21hbGxvYygpIHNpbmNlIGttYWxsb2MoKQpAQCAtMTUyLDE0ICsxNTIsMTQgQEAgRVhQ
T1JUX1NZTUJPTChfX3ZtYWxsb2MpOwogCiB2b2lkICpfX3ZtYWxsb2Nfbm9kZV9mbGFncyh1bnNp
Z25lZCBsb25nIHNpemUsIGludCBub2RlLCBnZnBfdCBmbGFncykKIHsKLQlyZXR1cm4gX192bWFs
bG9jKHNpemUsIGZsYWdzLCBQQUdFX0tFUk5FTCk7CisJcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBm
bGFncyk7CiB9CiAKIHN0YXRpYyB2b2lkICpfX3ZtYWxsb2NfdXNlcl9mbGFncyh1bnNpZ25lZCBs
b25nIHNpemUsIGdmcF90IGZsYWdzKQogewogCXZvaWQgKnJldDsKIAotCXJldCA9IF9fdm1hbGxv
YyhzaXplLCBmbGFncywgUEFHRV9LRVJORUwpOworCXJldCA9IF9fdm1hbGxvYyhzaXplLCBmbGFn
cyk7CiAJaWYgKHJldCkgewogCQlzdHJ1Y3Qgdm1fYXJlYV9zdHJ1Y3QgKnZtYTsKIApAQCAtMjMw
LDcgKzIzMCw3IEBAIGxvbmcgdndyaXRlKGNoYXIgKmJ1ZiwgY2hhciAqYWRkciwgdW5zaWduZWQg
bG9uZyBjb3VudCkKICAqLwogdm9pZCAqdm1hbGxvYyh1bnNpZ25lZCBsb25nIHNpemUpCiB7Ci0g
ICAgICAgcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBfS0VSTkVMIHwgX19HRlBfSElHSE1FTSwg
UEFHRV9LRVJORUwpOworICAgICAgIHJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX0tFUk5FTCB8
IF9fR0ZQX0hJR0hNRU0pOwogfQogRVhQT1JUX1NZTUJPTCh2bWFsbG9jKTsKIApAQCAtMjQ4LDgg
KzI0OCw3IEBAIEVYUE9SVF9TWU1CT0wodm1hbGxvYyk7CiAgKi8KIHZvaWQgKnZ6YWxsb2ModW5z
aWduZWQgbG9uZyBzaXplKQogewotCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX0tFUk5FTCB8
IF9fR0ZQX0hJR0hNRU0gfCBfX0dGUF9aRVJPLAotCQkJUEFHRV9LRVJORUwpOworCXJldHVybiBf
X3ZtYWxsb2Moc2l6ZSwgR0ZQX0tFUk5FTCB8IF9fR0ZQX0hJR0hNRU0gfCBfX0dGUF9aRVJPKTsK
IH0KIEVYUE9SVF9TWU1CT0wodnphbGxvYyk7CiAKQEAgLTMwMiw3ICszMDEsNyBAQCBFWFBPUlRf
U1lNQk9MKHZ6YWxsb2Nfbm9kZSk7CiAKIHZvaWQgKnZtYWxsb2NfZXhlYyh1bnNpZ25lZCBsb25n
IHNpemUpCiB7Ci0JcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBfS0VSTkVMIHwgX19HRlBfSElH
SE1FTSwgUEFHRV9LRVJORUxfRVhFQyk7CisJcmV0dXJuIF9fdm1hbGxvYyhzaXplLCBHRlBfS0VS
TkVMIHwgX19HRlBfSElHSE1FTSk7CiB9CiAKIC8qKgpAQCAtMzE0LDcgKzMxMyw3IEBAIHZvaWQg
KnZtYWxsb2NfZXhlYyh1bnNpZ25lZCBsb25nIHNpemUpCiAgKi8KIHZvaWQgKnZtYWxsb2NfMzIo
dW5zaWduZWQgbG9uZyBzaXplKQogewotCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX0tFUk5F
TCwgUEFHRV9LRVJORUwpOworCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgR0ZQX0tFUk5FTCk7CiB9
CiBFWFBPUlRfU1lNQk9MKHZtYWxsb2NfMzIpOwogCmRpZmYgLS1naXQgYS9tbS9wYWdlX2FsbG9j
LmMgYi9tbS9wYWdlX2FsbG9jLmMKaW5kZXggMTE0YzU2YzM2ODVkLi41M2Q0M2Y3MmJjZDggMTAw
NjQ0Ci0tLSBhL21tL3BhZ2VfYWxsb2MuYworKysgYi9tbS9wYWdlX2FsbG9jLmMKQEAgLTgyMzcs
NyArODIzNyw3IEBAIHZvaWQgKl9faW5pdCBhbGxvY19sYXJnZV9zeXN0ZW1faGFzaChjb25zdCBj
aGFyICp0YWJsZW5hbWUsCiAJCQkJdGFibGUgPSBtZW1ibG9ja19hbGxvY19yYXcoc2l6ZSwKIAkJ
CQkJCQkgICBTTVBfQ0FDSEVfQllURVMpOwogCQl9IGVsc2UgaWYgKGdldF9vcmRlcihzaXplKSA+
PSBNQVhfT1JERVIgfHwgaGFzaGRpc3QpIHsKLQkJCXRhYmxlID0gX192bWFsbG9jKHNpemUsIGdm
cF9mbGFncywgUEFHRV9LRVJORUwpOworCQkJdGFibGUgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwX2Zs
YWdzKTsKIAkJCXZpcnQgPSB0cnVlOwogCQl9IGVsc2UgewogCQkJLyoKZGlmZiAtLWdpdCBhL21t
L3BlcmNwdS5jIGIvbW0vcGVyY3B1LmMKaW5kZXggZDdlM2JjNjQ5ZjRlLi4xZTI3ODA5OWUxODUg
MTAwNjQ0Ci0tLSBhL21tL3BlcmNwdS5jCisrKyBiL21tL3BlcmNwdS5jCkBAIC00ODEsNyArNDgx
LDcgQEAgc3RhdGljIHZvaWQgKnBjcHVfbWVtX3phbGxvYyhzaXplX3Qgc2l6ZSwgZ2ZwX3QgZ2Zw
KQogCWlmIChzaXplIDw9IFBBR0VfU0laRSkKIAkJcmV0dXJuIGt6YWxsb2Moc2l6ZSwgZ2ZwKTsK
IAllbHNlCi0JCXJldHVybiBfX3ZtYWxsb2Moc2l6ZSwgZ2ZwIHwgX19HRlBfWkVSTywgUEFHRV9L
RVJORUwpOworCQlyZXR1cm4gX192bWFsbG9jKHNpemUsIGdmcCB8IF9fR0ZQX1pFUk8pOwogfQog
CiAvKioKZGlmZiAtLWdpdCBhL21tL3ZtYWxsb2MuYyBiL21tL3ZtYWxsb2MuYwppbmRleCAzMzRj
NzUyNTFkZGIuLjQ2NmE0NDliM2ExNSAxMDA2NDQKLS0tIGEvbW0vdm1hbGxvYy5jCisrKyBiL21t
L3ZtYWxsb2MuYwpAQCAtMjU2Myw5ICsyNTYzLDkgQEAgc3RhdGljIHZvaWQgKl9fdm1hbGxvY19u
b2RlKHVuc2lnbmVkIGxvbmcgc2l6ZSwgdW5zaWduZWQgbG9uZyBhbGlnbiwKIAkJCQlnZnBfbWFz
aywgcHJvdCwgMCwgbm9kZSwgY2FsbGVyKTsKIH0KIAotdm9pZCAqX192bWFsbG9jKHVuc2lnbmVk
IGxvbmcgc2l6ZSwgZ2ZwX3QgZ2ZwX21hc2ssIHBncHJvdF90IHByb3QpCit2b2lkICpfX3ZtYWxs
b2ModW5zaWduZWQgbG9uZyBzaXplLCBnZnBfdCBnZnBfbWFzaykKIHsKLQlyZXR1cm4gX192bWFs
bG9jX25vZGUoc2l6ZSwgMSwgZ2ZwX21hc2ssIHByb3QsIE5VTUFfTk9fTk9ERSwKKwlyZXR1cm4g
X192bWFsbG9jX25vZGUoc2l6ZSwgMSwgZ2ZwX21hc2ssIFBBR0VfS0VSTkVMLCBOVU1BX05PX05P
REUsCiAJCQkJX19idWlsdGluX3JldHVybl9hZGRyZXNzKDApKTsKIH0KIEVYUE9SVF9TWU1CT0wo
X192bWFsbG9jKTsKZGlmZiAtLWdpdCBhL25ldC9icmlkZ2UvbmV0ZmlsdGVyL2VidGFibGVzLmMg
Yi9uZXQvYnJpZGdlL25ldGZpbHRlci9lYnRhYmxlcy5jCmluZGV4IDc4ZGI1OGM3YWVjMi4uN2U4
NjkyODRlMDUyIDEwMDY0NAotLS0gYS9uZXQvYnJpZGdlL25ldGZpbHRlci9lYnRhYmxlcy5jCisr
KyBiL25ldC9icmlkZ2UvbmV0ZmlsdGVyL2VidGFibGVzLmMKQEAgLTEwOTUsMTYgKzEwOTUsMTQg
QEAgc3RhdGljIGludCBkb19yZXBsYWNlKHN0cnVjdCBuZXQgKm5ldCwgY29uc3Qgdm9pZCBfX3Vz
ZXIgKnVzZXIsCiAJdG1wLm5hbWVbc2l6ZW9mKHRtcC5uYW1lKSAtIDFdID0gMDsKIAogCWNvdW50
ZXJzaXplID0gQ09VTlRFUl9PRkZTRVQodG1wLm5lbnRyaWVzKSAqIG5yX2NwdV9pZHM7Ci0JbmV3
aW5mbyA9IF9fdm1hbGxvYyhzaXplb2YoKm5ld2luZm8pICsgY291bnRlcnNpemUsIEdGUF9LRVJO
RUxfQUNDT1VOVCwKLQkJCSAgICBQQUdFX0tFUk5FTCk7CisJbmV3aW5mbyA9IF9fdm1hbGxvYyhz
aXplb2YoKm5ld2luZm8pICsgY291bnRlcnNpemUsIEdGUF9LRVJORUxfQUNDT1VOVCk7CiAJaWYg
KCFuZXdpbmZvKQogCQlyZXR1cm4gLUVOT01FTTsKIAogCWlmIChjb3VudGVyc2l6ZSkKIAkJbWVt
c2V0KG5ld2luZm8tPmNvdW50ZXJzLCAwLCBjb3VudGVyc2l6ZSk7CiAKLQluZXdpbmZvLT5lbnRy
aWVzID0gX192bWFsbG9jKHRtcC5lbnRyaWVzX3NpemUsIEdGUF9LRVJORUxfQUNDT1VOVCwKLQkJ
CQkgICAgIFBBR0VfS0VSTkVMKTsKKwluZXdpbmZvLT5lbnRyaWVzID0gX192bWFsbG9jKHRtcC5l
bnRyaWVzX3NpemUsIEdGUF9LRVJORUxfQUNDT1VOVCk7CiAJaWYgKCFuZXdpbmZvLT5lbnRyaWVz
KSB7CiAJCXJldCA9IC1FTk9NRU07CiAJCWdvdG8gZnJlZV9uZXdpbmZvOwpkaWZmIC0tZ2l0IGEv
c291bmQvY29yZS9tZW1hbGxvYy5jIGIvc291bmQvY29yZS9tZW1hbGxvYy5jCmluZGV4IGE4MzU1
M2ZiZWRmMC4uYmVhNDZlZDE1N2E2IDEwMDY0NAotLS0gYS9zb3VuZC9jb3JlL21lbWFsbG9jLmMK
KysrIGIvc291bmQvY29yZS9tZW1hbGxvYy5jCkBAIC0xNDMsNyArMTQzLDcgQEAgaW50IHNuZF9k
bWFfYWxsb2NfcGFnZXMoaW50IHR5cGUsIHN0cnVjdCBkZXZpY2UgKmRldmljZSwgc2l6ZV90IHNp
emUsCiAJCWJyZWFrOwogCWNhc2UgU05EUlZfRE1BX1RZUEVfVk1BTExPQzoKIAkJZ2ZwID0gc25k
X21lbV9nZXRfZ2ZwX2ZsYWdzKGRldmljZSwgR0ZQX0tFUk5FTCB8IF9fR0ZQX0hJR0hNRU0pOwot
CQlkbWFiLT5hcmVhID0gX192bWFsbG9jKHNpemUsIGdmcCwgUEFHRV9LRVJORUwpOworCQlkbWFi
LT5hcmVhID0gX192bWFsbG9jKHNpemUsIGdmcCk7CiAJCWRtYWItPmFkZHIgPSAwOwogCQlicmVh
azsKICNpZmRlZiBDT05GSUdfSEFTX0RNQQpkaWZmIC0tZ2l0IGEvc291bmQvY29yZS9wY21fbWVt
b3J5LmMgYi9zb3VuZC9jb3JlL3BjbV9tZW1vcnkuYwppbmRleCBmY2FiMzdlYTY2NDEuLjg2MDkz
NWUzYWVhNCAxMDA2NDQKLS0tIGEvc291bmQvY29yZS9wY21fbWVtb3J5LmMKKysrIGIvc291bmQv
Y29yZS9wY21fbWVtb3J5LmMKQEAgLTQ2MCw3ICs0NjAsNyBAQCBpbnQgX3NuZF9wY21fbGliX2Fs
bG9jX3ZtYWxsb2NfYnVmZmVyKHN0cnVjdCBzbmRfcGNtX3N1YnN0cmVhbSAqc3Vic3RyZWFtLAog
CQkJcmV0dXJuIDA7IC8qIGFscmVhZHkgbGFyZ2UgZW5vdWdoICovCiAJCXZmcmVlKHJ1bnRpbWUt
PmRtYV9hcmVhKTsKIAl9Ci0JcnVudGltZS0+ZG1hX2FyZWEgPSBfX3ZtYWxsb2Moc2l6ZSwgZ2Zw
X2ZsYWdzLCBQQUdFX0tFUk5FTCk7CisJcnVudGltZS0+ZG1hX2FyZWEgPSBfX3ZtYWxsb2Moc2l6
ZSwgZ2ZwX2ZsYWdzKTsKIAlpZiAoIXJ1bnRpbWUtPmRtYV9hcmVhKQogCQlyZXR1cm4gLUVOT01F
TTsKIAlydW50aW1lLT5kbWFfYnl0ZXMgPSBzaXplOwotLSAKMi4yNS4xCgpfX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpMaW5hcm8tbW0tc2lnIG1haWxpbmcg
bGlzdApMaW5hcm8tbW0tc2lnQGxpc3RzLmxpbmFyby5vcmcKaHR0cHM6Ly9saXN0cy5saW5hcm8u
b3JnL21haWxtYW4vbGlzdGluZm8vbGluYXJvLW1tLXNpZwo=
